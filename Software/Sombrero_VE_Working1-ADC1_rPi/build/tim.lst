ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_TIM_PWM_MspInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_TIM_PWM_MspInit:
  27              	.LVL0:
  28              	.LFB323:
  29              		.file 1 "Src/tim.c"
   1:Src/tim.c     **** /**
   2:Src/tim.c     ****   ******************************************************************************
   3:Src/tim.c     ****   * File Name          : TIM.c
   4:Src/tim.c     ****   * Description        : This file provides code for the configuration
   5:Src/tim.c     ****   *                      of the TIM instances.
   6:Src/tim.c     ****   ******************************************************************************
   7:Src/tim.c     ****   ** This notice applies to any and all portions of this file
   8:Src/tim.c     ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/tim.c     ****   * USER CODE END. Other portions of this file, whether 
  10:Src/tim.c     ****   * inserted by the user or by software development tools
  11:Src/tim.c     ****   * are owned by their respective copyright owners.
  12:Src/tim.c     ****   *
  13:Src/tim.c     ****   * COPYRIGHT(c) 2020 STMicroelectronics
  14:Src/tim.c     ****   *
  15:Src/tim.c     ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/tim.c     ****   * are permitted provided that the following conditions are met:
  17:Src/tim.c     ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/tim.c     ****   *      this list of conditions and the following disclaimer.
  19:Src/tim.c     ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/tim.c     ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/tim.c     ****   *      and/or other materials provided with the distribution.
  22:Src/tim.c     ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/tim.c     ****   *      may be used to endorse or promote products derived from this software
  24:Src/tim.c     ****   *      without specific prior written permission.
  25:Src/tim.c     ****   *
  26:Src/tim.c     ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/tim.c     ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/tim.c     ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/tim.c     ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 2


  30:Src/tim.c     ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/tim.c     ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/tim.c     ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/tim.c     ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/tim.c     ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/tim.c     ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/tim.c     ****   *
  37:Src/tim.c     ****   ******************************************************************************
  38:Src/tim.c     ****   */
  39:Src/tim.c     **** 
  40:Src/tim.c     **** /* Includes ------------------------------------------------------------------*/
  41:Src/tim.c     **** #include "tim.h"
  42:Src/tim.c     **** 
  43:Src/tim.c     **** /* USER CODE BEGIN 0 */
  44:Src/tim.c     **** #include "stm32f3xx_ll_tim.h"
  45:Src/tim.c     **** /* USER CODE END 0 */
  46:Src/tim.c     **** 
  47:Src/tim.c     **** TIM_HandleTypeDef htim8;
  48:Src/tim.c     **** 
  49:Src/tim.c     **** /* TIM8 init function */
  50:Src/tim.c     **** void MX_TIM8_Init(void)
  51:Src/tim.c     **** {
  52:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
  53:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
  54:Src/tim.c     ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  55:Src/tim.c     **** 
  56:Src/tim.c     ****   htim8.Instance = TIM8;
  57:Src/tim.c     ****   htim8.Init.Prescaler = 71;
  58:Src/tim.c     ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  59:Src/tim.c     ****   htim8.Init.Period = 9999;
  60:Src/tim.c     ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  61:Src/tim.c     ****   htim8.Init.RepetitionCounter = 0;
  62:Src/tim.c     ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  63:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
  64:Src/tim.c     ****   {
  65:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
  66:Src/tim.c     ****   }
  67:Src/tim.c     **** 
  68:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  69:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC2REF;
  70:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  71:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  72:Src/tim.c     ****   {
  73:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
  74:Src/tim.c     ****   }
  75:Src/tim.c     **** 
  76:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
  77:Src/tim.c     ****   sConfigOC.Pulse = 0;
  78:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  79:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  80:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  81:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  82:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  83:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  84:Src/tim.c     ****   {
  85:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
  86:Src/tim.c     ****   }
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 3


  87:Src/tim.c     **** 
  88:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  89:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  90:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  91:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = 0;
  92:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  93:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  94:Src/tim.c     ****   sBreakDeadTimeConfig.BreakFilter = 0;
  95:Src/tim.c     ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  96:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  97:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Filter = 0;
  98:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  99:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 100:Src/tim.c     ****   {
 101:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 102:Src/tim.c     ****   }
 103:Src/tim.c     **** 
 104:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim8);
 105:Src/tim.c     **** 
 106:Src/tim.c     **** }
 107:Src/tim.c     **** 
 108:Src/tim.c     **** void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
 109:Src/tim.c     **** {
  30              		.loc 1 109 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 110:Src/tim.c     **** 
 111:Src/tim.c     ****   if(tim_pwmHandle->Instance==TIM8)
  35              		.loc 1 111 3 view .LVU1
  36              		.loc 1 111 19 is_stmt 0 view .LVU2
  37 0000 0268     		ldr	r2, [r0]
  38              		.loc 1 111 5 view .LVU3
  39 0002 094B     		ldr	r3, .L8
  40 0004 9A42     		cmp	r2, r3
  41 0006 00D0     		beq	.L7
  42 0008 7047     		bx	lr
  43              	.L7:
 109:Src/tim.c     **** 
  44              		.loc 1 109 1 view .LVU4
  45 000a 82B0     		sub	sp, sp, #8
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 8
 112:Src/tim.c     ****   {
 113:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspInit 0 */
 114:Src/tim.c     **** 
 115:Src/tim.c     ****   /* USER CODE END TIM8_MspInit 0 */
 116:Src/tim.c     ****     /* TIM8 clock enable */
 117:Src/tim.c     ****     __HAL_RCC_TIM8_CLK_ENABLE();
  48              		.loc 1 117 5 is_stmt 1 view .LVU5
  49              	.LBB4:
  50              		.loc 1 117 5 view .LVU6
  51              		.loc 1 117 5 view .LVU7
  52 000c 03F55C43 		add	r3, r3, #56320
  53 0010 9A69     		ldr	r2, [r3, #24]
  54 0012 42F40052 		orr	r2, r2, #8192
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 4


  55 0016 9A61     		str	r2, [r3, #24]
  56              		.loc 1 117 5 view .LVU8
  57 0018 9B69     		ldr	r3, [r3, #24]
  58 001a 03F40053 		and	r3, r3, #8192
  59 001e 0193     		str	r3, [sp, #4]
  60              		.loc 1 117 5 view .LVU9
  61 0020 019B     		ldr	r3, [sp, #4]
  62              	.LBE4:
 118:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspInit 1 */
 119:Src/tim.c     **** 
 120:Src/tim.c     ****   /* USER CODE END TIM8_MspInit 1 */
 121:Src/tim.c     ****   }
 122:Src/tim.c     **** }
  63              		.loc 1 122 1 is_stmt 0 view .LVU10
  64 0022 02B0     		add	sp, sp, #8
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 0
  67              		@ sp needed
  68 0024 7047     		bx	lr
  69              	.L9:
  70 0026 00BF     		.align	2
  71              	.L8:
  72 0028 00340140 		.word	1073820672
  73              		.cfi_endproc
  74              	.LFE323:
  76              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
  77              		.align	1
  78              		.global	HAL_TIM_MspPostInit
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv4-sp-d16
  84              	HAL_TIM_MspPostInit:
  85              	.LVL1:
  86              	.LFB324:
 123:Src/tim.c     **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 124:Src/tim.c     **** {
  87              		.loc 1 124 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 24
  90              		@ frame_needed = 0, uses_anonymous_args = 0
 125:Src/tim.c     **** 
 126:Src/tim.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
  91              		.loc 1 126 3 view .LVU12
 127:Src/tim.c     ****   if(timHandle->Instance==TIM8)
  92              		.loc 1 127 3 view .LVU13
  93              		.loc 1 127 15 is_stmt 0 view .LVU14
  94 0000 0268     		ldr	r2, [r0]
  95              		.loc 1 127 5 view .LVU15
  96 0002 0C4B     		ldr	r3, .L17
  97 0004 9A42     		cmp	r2, r3
  98 0006 00D0     		beq	.L16
  99 0008 7047     		bx	lr
 100              	.L16:
 124:Src/tim.c     **** 
 101              		.loc 1 124 1 view .LVU16
 102 000a 00B5     		push	{lr}
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 5


 103              	.LCFI2:
 104              		.cfi_def_cfa_offset 4
 105              		.cfi_offset 14, -4
 106 000c 87B0     		sub	sp, sp, #28
 107              	.LCFI3:
 108              		.cfi_def_cfa_offset 32
 128:Src/tim.c     ****   {
 129:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspPostInit 0 */
 130:Src/tim.c     **** 
 131:Src/tim.c     ****   /* USER CODE END TIM8_MspPostInit 0 */
 132:Src/tim.c     ****   
 133:Src/tim.c     ****     /**TIM8 GPIO Configuration    
 134:Src/tim.c     ****     PA14     ------> TIM8_CH2 
 135:Src/tim.c     ****     */
 136:Src/tim.c     ****     GPIO_InitStruct.Pin = ADC_TRIG_Pin;
 109              		.loc 1 136 5 is_stmt 1 view .LVU17
 110              		.loc 1 136 25 is_stmt 0 view .LVU18
 111 000e 4FF48043 		mov	r3, #16384
 112 0012 0193     		str	r3, [sp, #4]
 137:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 113              		.loc 1 137 5 is_stmt 1 view .LVU19
 114              		.loc 1 137 26 is_stmt 0 view .LVU20
 115 0014 0223     		movs	r3, #2
 116 0016 0293     		str	r3, [sp, #8]
 138:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 138 5 is_stmt 1 view .LVU21
 118              		.loc 1 138 26 is_stmt 0 view .LVU22
 119 0018 0023     		movs	r3, #0
 120 001a 0393     		str	r3, [sp, #12]
 139:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 121              		.loc 1 139 5 is_stmt 1 view .LVU23
 122              		.loc 1 139 27 is_stmt 0 view .LVU24
 123 001c 0493     		str	r3, [sp, #16]
 140:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 124              		.loc 1 140 5 is_stmt 1 view .LVU25
 125              		.loc 1 140 31 is_stmt 0 view .LVU26
 126 001e 0523     		movs	r3, #5
 127 0020 0593     		str	r3, [sp, #20]
 141:Src/tim.c     ****     HAL_GPIO_Init(ADC_TRIG_GPIO_Port, &GPIO_InitStruct);
 128              		.loc 1 141 5 is_stmt 1 view .LVU27
 129 0022 01A9     		add	r1, sp, #4
 130 0024 4FF09040 		mov	r0, #1207959552
 131              	.LVL2:
 132              		.loc 1 141 5 is_stmt 0 view .LVU28
 133 0028 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL3:
 142:Src/tim.c     **** 
 143:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspPostInit 1 */
 144:Src/tim.c     **** 
 145:Src/tim.c     ****   /* USER CODE END TIM8_MspPostInit 1 */
 146:Src/tim.c     ****   }
 147:Src/tim.c     **** 
 148:Src/tim.c     **** }
 135              		.loc 1 148 1 view .LVU29
 136 002c 07B0     		add	sp, sp, #28
 137              	.LCFI4:
 138              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 6


 139              		@ sp needed
 140 002e 5DF804FB 		ldr	pc, [sp], #4
 141              	.L18:
 142 0032 00BF     		.align	2
 143              	.L17:
 144 0034 00340140 		.word	1073820672
 145              		.cfi_endproc
 146              	.LFE324:
 148              		.section	.text.MX_TIM8_Init,"ax",%progbits
 149              		.align	1
 150              		.global	MX_TIM8_Init
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv4-sp-d16
 156              	MX_TIM8_Init:
 157              	.LFB322:
  51:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 158              		.loc 1 51 1 is_stmt 1 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 88
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162 0000 00B5     		push	{lr}
 163              	.LCFI5:
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 14, -4
 166 0002 97B0     		sub	sp, sp, #92
 167              	.LCFI6:
 168              		.cfi_def_cfa_offset 96
  52:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 169              		.loc 1 52 3 view .LVU31
  53:Src/tim.c     ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 170              		.loc 1 53 3 view .LVU32
  54:Src/tim.c     **** 
 171              		.loc 1 54 3 view .LVU33
  56:Src/tim.c     ****   htim8.Init.Prescaler = 71;
 172              		.loc 1 56 3 view .LVU34
  56:Src/tim.c     ****   htim8.Init.Prescaler = 71;
 173              		.loc 1 56 18 is_stmt 0 view .LVU35
 174 0004 2D48     		ldr	r0, .L29
 175 0006 2E4B     		ldr	r3, .L29+4
 176 0008 0360     		str	r3, [r0]
  57:Src/tim.c     ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 177              		.loc 1 57 3 is_stmt 1 view .LVU36
  57:Src/tim.c     ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 178              		.loc 1 57 24 is_stmt 0 view .LVU37
 179 000a 4723     		movs	r3, #71
 180 000c 4360     		str	r3, [r0, #4]
  58:Src/tim.c     ****   htim8.Init.Period = 9999;
 181              		.loc 1 58 3 is_stmt 1 view .LVU38
  58:Src/tim.c     ****   htim8.Init.Period = 9999;
 182              		.loc 1 58 26 is_stmt 0 view .LVU39
 183 000e 0023     		movs	r3, #0
 184 0010 8360     		str	r3, [r0, #8]
  59:Src/tim.c     ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 185              		.loc 1 59 3 is_stmt 1 view .LVU40
  59:Src/tim.c     ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 7


 186              		.loc 1 59 21 is_stmt 0 view .LVU41
 187 0012 42F20F72 		movw	r2, #9999
 188 0016 C260     		str	r2, [r0, #12]
  60:Src/tim.c     ****   htim8.Init.RepetitionCounter = 0;
 189              		.loc 1 60 3 is_stmt 1 view .LVU42
  60:Src/tim.c     ****   htim8.Init.RepetitionCounter = 0;
 190              		.loc 1 60 28 is_stmt 0 view .LVU43
 191 0018 0361     		str	r3, [r0, #16]
  61:Src/tim.c     ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 192              		.loc 1 61 3 is_stmt 1 view .LVU44
  61:Src/tim.c     ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 193              		.loc 1 61 32 is_stmt 0 view .LVU45
 194 001a 4361     		str	r3, [r0, #20]
  62:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 195              		.loc 1 62 3 is_stmt 1 view .LVU46
  62:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 196              		.loc 1 62 32 is_stmt 0 view .LVU47
 197 001c 8361     		str	r3, [r0, #24]
  63:Src/tim.c     ****   {
 198              		.loc 1 63 3 is_stmt 1 view .LVU48
  63:Src/tim.c     ****   {
 199              		.loc 1 63 7 is_stmt 0 view .LVU49
 200 001e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 201              	.LVL4:
  63:Src/tim.c     ****   {
 202              		.loc 1 63 6 view .LVU50
 203 0022 0028     		cmp	r0, #0
 204 0024 35D1     		bne	.L25
 205              	.L20:
  68:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC2REF;
 206              		.loc 1 68 3 is_stmt 1 view .LVU51
  68:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC2REF;
 207              		.loc 1 68 37 is_stmt 0 view .LVU52
 208 0026 0023     		movs	r3, #0
 209 0028 1393     		str	r3, [sp, #76]
  69:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 210              		.loc 1 69 3 is_stmt 1 view .LVU53
  69:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 211              		.loc 1 69 38 is_stmt 0 view .LVU54
 212 002a 4FF4A002 		mov	r2, #5242880
 213 002e 1492     		str	r2, [sp, #80]
  70:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 214              		.loc 1 70 3 is_stmt 1 view .LVU55
  70:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 215              		.loc 1 70 33 is_stmt 0 view .LVU56
 216 0030 1593     		str	r3, [sp, #84]
  71:Src/tim.c     ****   {
 217              		.loc 1 71 3 is_stmt 1 view .LVU57
  71:Src/tim.c     ****   {
 218              		.loc 1 71 7 is_stmt 0 view .LVU58
 219 0032 13A9     		add	r1, sp, #76
 220 0034 2148     		ldr	r0, .L29
 221 0036 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 222              	.LVL5:
  71:Src/tim.c     ****   {
 223              		.loc 1 71 6 view .LVU59
 224 003a 0028     		cmp	r0, #0
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 8


 225 003c 2ED1     		bne	.L26
 226              	.L21:
  76:Src/tim.c     ****   sConfigOC.Pulse = 0;
 227              		.loc 1 76 3 is_stmt 1 view .LVU60
  76:Src/tim.c     ****   sConfigOC.Pulse = 0;
 228              		.loc 1 76 20 is_stmt 0 view .LVU61
 229 003e 6023     		movs	r3, #96
 230 0040 0C93     		str	r3, [sp, #48]
  77:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 231              		.loc 1 77 3 is_stmt 1 view .LVU62
  77:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 232              		.loc 1 77 19 is_stmt 0 view .LVU63
 233 0042 0023     		movs	r3, #0
 234 0044 0D93     		str	r3, [sp, #52]
  78:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 235              		.loc 1 78 3 is_stmt 1 view .LVU64
  78:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 236              		.loc 1 78 24 is_stmt 0 view .LVU65
 237 0046 0E93     		str	r3, [sp, #56]
  79:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 238              		.loc 1 79 3 is_stmt 1 view .LVU66
  79:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 239              		.loc 1 79 25 is_stmt 0 view .LVU67
 240 0048 0F93     		str	r3, [sp, #60]
  80:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 241              		.loc 1 80 3 is_stmt 1 view .LVU68
  80:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 242              		.loc 1 80 24 is_stmt 0 view .LVU69
 243 004a 1093     		str	r3, [sp, #64]
  81:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 244              		.loc 1 81 3 is_stmt 1 view .LVU70
  81:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 245              		.loc 1 81 25 is_stmt 0 view .LVU71
 246 004c 1193     		str	r3, [sp, #68]
  82:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 247              		.loc 1 82 3 is_stmt 1 view .LVU72
  82:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 248              		.loc 1 82 26 is_stmt 0 view .LVU73
 249 004e 1293     		str	r3, [sp, #72]
  83:Src/tim.c     ****   {
 250              		.loc 1 83 3 is_stmt 1 view .LVU74
  83:Src/tim.c     ****   {
 251              		.loc 1 83 7 is_stmt 0 view .LVU75
 252 0050 0422     		movs	r2, #4
 253 0052 0CA9     		add	r1, sp, #48
 254 0054 1948     		ldr	r0, .L29
 255 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 256              	.LVL6:
  83:Src/tim.c     ****   {
 257              		.loc 1 83 6 view .LVU76
 258 005a 20BB     		cbnz	r0, .L27
 259              	.L22:
  88:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 260              		.loc 1 88 3 is_stmt 1 view .LVU77
  88:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 261              		.loc 1 88 40 is_stmt 0 view .LVU78
 262 005c 0023     		movs	r3, #0
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 9


 263 005e 0193     		str	r3, [sp, #4]
  89:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 264              		.loc 1 89 3 is_stmt 1 view .LVU79
  89:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 265              		.loc 1 89 41 is_stmt 0 view .LVU80
 266 0060 0293     		str	r3, [sp, #8]
  90:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = 0;
 267              		.loc 1 90 3 is_stmt 1 view .LVU81
  90:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = 0;
 268              		.loc 1 90 34 is_stmt 0 view .LVU82
 269 0062 0393     		str	r3, [sp, #12]
  91:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 270              		.loc 1 91 3 is_stmt 1 view .LVU83
  91:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 271              		.loc 1 91 33 is_stmt 0 view .LVU84
 272 0064 0493     		str	r3, [sp, #16]
  92:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 273              		.loc 1 92 3 is_stmt 1 view .LVU85
  92:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 274              		.loc 1 92 35 is_stmt 0 view .LVU86
 275 0066 0593     		str	r3, [sp, #20]
  93:Src/tim.c     ****   sBreakDeadTimeConfig.BreakFilter = 0;
 276              		.loc 1 93 3 is_stmt 1 view .LVU87
  93:Src/tim.c     ****   sBreakDeadTimeConfig.BreakFilter = 0;
 277              		.loc 1 93 38 is_stmt 0 view .LVU88
 278 0068 4FF40052 		mov	r2, #8192
 279 006c 0692     		str	r2, [sp, #24]
  94:Src/tim.c     ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 280              		.loc 1 94 3 is_stmt 1 view .LVU89
  94:Src/tim.c     ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 281              		.loc 1 94 36 is_stmt 0 view .LVU90
 282 006e 0793     		str	r3, [sp, #28]
  95:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 283              		.loc 1 95 3 is_stmt 1 view .LVU91
  95:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 284              		.loc 1 95 36 is_stmt 0 view .LVU92
 285 0070 0893     		str	r3, [sp, #32]
  96:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Filter = 0;
 286              		.loc 1 96 3 is_stmt 1 view .LVU93
  96:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Filter = 0;
 287              		.loc 1 96 39 is_stmt 0 view .LVU94
 288 0072 4FF00072 		mov	r2, #33554432
 289 0076 0992     		str	r2, [sp, #36]
  97:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 290              		.loc 1 97 3 is_stmt 1 view .LVU95
  97:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 291              		.loc 1 97 37 is_stmt 0 view .LVU96
 292 0078 0A93     		str	r3, [sp, #40]
  98:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 293              		.loc 1 98 3 is_stmt 1 view .LVU97
  98:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 294              		.loc 1 98 40 is_stmt 0 view .LVU98
 295 007a 0B93     		str	r3, [sp, #44]
  99:Src/tim.c     ****   {
 296              		.loc 1 99 3 is_stmt 1 view .LVU99
  99:Src/tim.c     ****   {
 297              		.loc 1 99 7 is_stmt 0 view .LVU100
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 10


 298 007c 01A9     		add	r1, sp, #4
 299 007e 0F48     		ldr	r0, .L29
 300 0080 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 301              	.LVL7:
  99:Src/tim.c     ****   {
 302              		.loc 1 99 6 view .LVU101
 303 0084 A0B9     		cbnz	r0, .L28
 304              	.L23:
 104:Src/tim.c     **** 
 305              		.loc 1 104 3 is_stmt 1 view .LVU102
 306 0086 0D48     		ldr	r0, .L29
 307 0088 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 308              	.LVL8:
 106:Src/tim.c     **** 
 309              		.loc 1 106 1 is_stmt 0 view .LVU103
 310 008c 17B0     		add	sp, sp, #92
 311              	.LCFI7:
 312              		.cfi_remember_state
 313              		.cfi_def_cfa_offset 4
 314              		@ sp needed
 315 008e 5DF804FB 		ldr	pc, [sp], #4
 316              	.L25:
 317              	.LCFI8:
 318              		.cfi_restore_state
  65:Src/tim.c     ****   }
 319              		.loc 1 65 5 is_stmt 1 view .LVU104
 320 0092 4121     		movs	r1, #65
 321 0094 0B48     		ldr	r0, .L29+8
 322 0096 FFF7FEFF 		bl	_Error_Handler
 323              	.LVL9:
 324 009a C4E7     		b	.L20
 325              	.L26:
  73:Src/tim.c     ****   }
 326              		.loc 1 73 5 view .LVU105
 327 009c 4921     		movs	r1, #73
 328 009e 0948     		ldr	r0, .L29+8
 329 00a0 FFF7FEFF 		bl	_Error_Handler
 330              	.LVL10:
 331 00a4 CBE7     		b	.L21
 332              	.L27:
  85:Src/tim.c     ****   }
 333              		.loc 1 85 5 view .LVU106
 334 00a6 5521     		movs	r1, #85
 335 00a8 0648     		ldr	r0, .L29+8
 336 00aa FFF7FEFF 		bl	_Error_Handler
 337              	.LVL11:
 338 00ae D5E7     		b	.L22
 339              	.L28:
 101:Src/tim.c     ****   }
 340              		.loc 1 101 5 view .LVU107
 341 00b0 6521     		movs	r1, #101
 342 00b2 0448     		ldr	r0, .L29+8
 343 00b4 FFF7FEFF 		bl	_Error_Handler
 344              	.LVL12:
 345 00b8 E5E7     		b	.L23
 346              	.L30:
 347 00ba 00BF     		.align	2
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 11


 348              	.L29:
 349 00bc 00000000 		.word	htim8
 350 00c0 00340140 		.word	1073820672
 351 00c4 00000000 		.word	.LC0
 352              		.cfi_endproc
 353              	.LFE322:
 355              		.section	.text.HAL_TIM_PWM_MspDeInit,"ax",%progbits
 356              		.align	1
 357              		.global	HAL_TIM_PWM_MspDeInit
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv4-sp-d16
 363              	HAL_TIM_PWM_MspDeInit:
 364              	.LVL13:
 365              	.LFB325:
 149:Src/tim.c     **** 
 150:Src/tim.c     **** void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
 151:Src/tim.c     **** {
 366              		.loc 1 151 1 view -0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 152:Src/tim.c     **** 
 153:Src/tim.c     ****   if(tim_pwmHandle->Instance==TIM8)
 371              		.loc 1 153 3 view .LVU109
 372              		.loc 1 153 19 is_stmt 0 view .LVU110
 373 0000 0268     		ldr	r2, [r0]
 374              		.loc 1 153 5 view .LVU111
 375 0002 054B     		ldr	r3, .L34
 376 0004 9A42     		cmp	r2, r3
 377 0006 00D0     		beq	.L33
 378              	.L31:
 154:Src/tim.c     ****   {
 155:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 0 */
 156:Src/tim.c     **** 
 157:Src/tim.c     ****   /* USER CODE END TIM8_MspDeInit 0 */
 158:Src/tim.c     ****     /* Peripheral clock disable */
 159:Src/tim.c     ****     __HAL_RCC_TIM8_CLK_DISABLE();
 160:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 161:Src/tim.c     **** 
 162:Src/tim.c     ****   /* USER CODE END TIM8_MspDeInit 1 */
 163:Src/tim.c     ****   }
 164:Src/tim.c     **** } 
 379              		.loc 1 164 1 view .LVU112
 380 0008 7047     		bx	lr
 381              	.L33:
 159:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 382              		.loc 1 159 5 is_stmt 1 view .LVU113
 383 000a 044A     		ldr	r2, .L34+4
 384 000c 9369     		ldr	r3, [r2, #24]
 385 000e 23F40053 		bic	r3, r3, #8192
 386 0012 9361     		str	r3, [r2, #24]
 387              		.loc 1 164 1 is_stmt 0 view .LVU114
 388 0014 F8E7     		b	.L31
 389              	.L35:
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 12


 390 0016 00BF     		.align	2
 391              	.L34:
 392 0018 00340140 		.word	1073820672
 393 001c 00100240 		.word	1073876992
 394              		.cfi_endproc
 395              	.LFE325:
 397              		.section	.text.pulse_tim8_ch2,"ax",%progbits
 398              		.align	1
 399              		.global	pulse_tim8_ch2
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu fpv4-sp-d16
 405              	pulse_tim8_ch2:
 406              	.LVL14:
 407              	.LFB326:
 165:Src/tim.c     **** 
 166:Src/tim.c     **** /* USER CODE BEGIN 1 */
 167:Src/tim.c     **** void pulse_tim8_ch2 (int pulse_width_usec) {
 408              		.loc 1 167 44 is_stmt 1 view -0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		.loc 1 167 44 is_stmt 0 view .LVU116
 413 0000 38B5     		push	{r3, r4, r5, lr}
 414              	.LCFI9:
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 3, -16
 417              		.cfi_offset 4, -12
 418              		.cfi_offset 5, -8
 419              		.cfi_offset 14, -4
 420 0002 0446     		mov	r4, r0
 168:Src/tim.c     **** 
 169:Src/tim.c     ****   HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);         // In case it's running
 421              		.loc 1 169 3 is_stmt 1 view .LVU117
 422 0004 074D     		ldr	r5, .L38
 423 0006 0421     		movs	r1, #4
 424 0008 2846     		mov	r0, r5
 425              	.LVL15:
 426              		.loc 1 169 3 is_stmt 0 view .LVU118
 427 000a FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 428              	.LVL16:
 170:Src/tim.c     ****   LL_TIM_OC_SetCompareCH2(htim8.Instance, 10000 - pulse_width_usec);
 429              		.loc 1 170 3 is_stmt 1 view .LVU119
 430 000e 2B68     		ldr	r3, [r5]
 431              		.loc 1 170 49 is_stmt 0 view .LVU120
 432 0010 C4F51C54 		rsb	r4, r4, #9984
 433              	.LVL17:
 434              		.loc 1 170 49 view .LVU121
 435 0014 1034     		adds	r4, r4, #16
 436              	.LVL18:
 437              	.LBB5:
 438              	.LBI5:
 439              		.file 2 "Inc/stm32f3xx_ll_tim.h"
   1:Inc/stm32f3xx_ll_tim.h **** /**
   2:Inc/stm32f3xx_ll_tim.h ****   ******************************************************************************
   3:Inc/stm32f3xx_ll_tim.h ****   * @file    stm32f3xx_ll_tim.h
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 13


   4:Inc/stm32f3xx_ll_tim.h ****   * @author  MCD Application Team
   5:Inc/stm32f3xx_ll_tim.h ****   * @brief   Header file of TIM LL module.
   6:Inc/stm32f3xx_ll_tim.h ****   ******************************************************************************
   7:Inc/stm32f3xx_ll_tim.h ****   * @attention
   8:Inc/stm32f3xx_ll_tim.h ****   *
   9:Inc/stm32f3xx_ll_tim.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Inc/stm32f3xx_ll_tim.h ****   *
  11:Inc/stm32f3xx_ll_tim.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Inc/stm32f3xx_ll_tim.h ****   * are permitted provided that the following conditions are met:
  13:Inc/stm32f3xx_ll_tim.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Inc/stm32f3xx_ll_tim.h ****   *      this list of conditions and the following disclaimer.
  15:Inc/stm32f3xx_ll_tim.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Inc/stm32f3xx_ll_tim.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Inc/stm32f3xx_ll_tim.h ****   *      and/or other materials provided with the distribution.
  18:Inc/stm32f3xx_ll_tim.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Inc/stm32f3xx_ll_tim.h ****   *      may be used to endorse or promote products derived from this software
  20:Inc/stm32f3xx_ll_tim.h ****   *      without specific prior written permission.
  21:Inc/stm32f3xx_ll_tim.h ****   *
  22:Inc/stm32f3xx_ll_tim.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Inc/stm32f3xx_ll_tim.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Inc/stm32f3xx_ll_tim.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Inc/stm32f3xx_ll_tim.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Inc/stm32f3xx_ll_tim.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Inc/stm32f3xx_ll_tim.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Inc/stm32f3xx_ll_tim.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Inc/stm32f3xx_ll_tim.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Inc/stm32f3xx_ll_tim.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Inc/stm32f3xx_ll_tim.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Inc/stm32f3xx_ll_tim.h ****   *
  33:Inc/stm32f3xx_ll_tim.h ****   ******************************************************************************
  34:Inc/stm32f3xx_ll_tim.h ****   */
  35:Inc/stm32f3xx_ll_tim.h **** 
  36:Inc/stm32f3xx_ll_tim.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Inc/stm32f3xx_ll_tim.h **** #ifndef __STM32F3xx_LL_TIM_H
  38:Inc/stm32f3xx_ll_tim.h **** #define __STM32F3xx_LL_TIM_H
  39:Inc/stm32f3xx_ll_tim.h **** 
  40:Inc/stm32f3xx_ll_tim.h **** #ifdef __cplusplus
  41:Inc/stm32f3xx_ll_tim.h **** extern "C" {
  42:Inc/stm32f3xx_ll_tim.h **** #endif
  43:Inc/stm32f3xx_ll_tim.h **** 
  44:Inc/stm32f3xx_ll_tim.h **** /* Includes ------------------------------------------------------------------*/
  45:Inc/stm32f3xx_ll_tim.h **** #include "stm32f3xx.h"
  46:Inc/stm32f3xx_ll_tim.h **** 
  47:Inc/stm32f3xx_ll_tim.h **** /** @addtogroup STM32F3xx_LL_Driver
  48:Inc/stm32f3xx_ll_tim.h ****   * @{
  49:Inc/stm32f3xx_ll_tim.h ****   */
  50:Inc/stm32f3xx_ll_tim.h **** 
  51:Inc/stm32f3xx_ll_tim.h **** #if defined (TIM1) || defined (TIM2) || defined (TIM3) || defined (TIM4) || defined (TIM5) || defin
  52:Inc/stm32f3xx_ll_tim.h **** 
  53:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL TIM
  54:Inc/stm32f3xx_ll_tim.h ****   * @{
  55:Inc/stm32f3xx_ll_tim.h ****   */
  56:Inc/stm32f3xx_ll_tim.h **** 
  57:Inc/stm32f3xx_ll_tim.h **** /* Private types -------------------------------------------------------------*/
  58:Inc/stm32f3xx_ll_tim.h **** /* Private variables ---------------------------------------------------------*/
  59:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Variables TIM Private Variables
  60:Inc/stm32f3xx_ll_tim.h ****   * @{
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 14


  61:Inc/stm32f3xx_ll_tim.h ****   */
  62:Inc/stm32f3xx_ll_tim.h **** static const uint8_t OFFSET_TAB_CCMRx[] =
  63:Inc/stm32f3xx_ll_tim.h **** {
  64:Inc/stm32f3xx_ll_tim.h ****   0x00U,   /* 0: TIMx_CH1  */
  65:Inc/stm32f3xx_ll_tim.h ****   0x00U,   /* 1: TIMx_CH1N */
  66:Inc/stm32f3xx_ll_tim.h ****   0x00U,   /* 2: TIMx_CH2  */
  67:Inc/stm32f3xx_ll_tim.h ****   0x00U,   /* 3: TIMx_CH2N */
  68:Inc/stm32f3xx_ll_tim.h ****   0x04U,   /* 4: TIMx_CH3  */
  69:Inc/stm32f3xx_ll_tim.h ****   0x04U,   /* 5: TIMx_CH3N */
  70:Inc/stm32f3xx_ll_tim.h ****   0x04U,   /* 6: TIMx_CH4  */
  71:Inc/stm32f3xx_ll_tim.h ****   0x3CU,   /* 7: TIMx_CH5  */
  72:Inc/stm32f3xx_ll_tim.h ****   0x3CU    /* 8: TIMx_CH6  */
  73:Inc/stm32f3xx_ll_tim.h **** };
  74:Inc/stm32f3xx_ll_tim.h **** 
  75:Inc/stm32f3xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OCxx[] =
  76:Inc/stm32f3xx_ll_tim.h **** {
  77:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 0: OC1M, OC1FE, OC1PE */
  78:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 1: - NA */
  79:Inc/stm32f3xx_ll_tim.h ****   8U,            /* 2: OC2M, OC2FE, OC2PE */
  80:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 3: - NA */
  81:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 4: OC3M, OC3FE, OC3PE */
  82:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 5: - NA */
  83:Inc/stm32f3xx_ll_tim.h ****   8U,            /* 6: OC4M, OC4FE, OC4PE */
  84:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 7: OC5M, OC5FE, OC5PE */
  85:Inc/stm32f3xx_ll_tim.h ****   8U             /* 8: OC6M, OC6FE, OC6PE */
  86:Inc/stm32f3xx_ll_tim.h **** };
  87:Inc/stm32f3xx_ll_tim.h **** 
  88:Inc/stm32f3xx_ll_tim.h **** static const uint8_t SHIFT_TAB_ICxx[] =
  89:Inc/stm32f3xx_ll_tim.h **** {
  90:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 0: CC1S, IC1PSC, IC1F */
  91:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 1: - NA */
  92:Inc/stm32f3xx_ll_tim.h ****   8U,            /* 2: CC2S, IC2PSC, IC2F */
  93:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 3: - NA */
  94:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 4: CC3S, IC3PSC, IC3F */
  95:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 5: - NA */
  96:Inc/stm32f3xx_ll_tim.h ****   8U,            /* 6: CC4S, IC4PSC, IC4F */
  97:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 7: - NA */
  98:Inc/stm32f3xx_ll_tim.h ****   0U             /* 8: - NA */
  99:Inc/stm32f3xx_ll_tim.h **** };
 100:Inc/stm32f3xx_ll_tim.h **** 
 101:Inc/stm32f3xx_ll_tim.h **** static const uint8_t SHIFT_TAB_CCxP[] =
 102:Inc/stm32f3xx_ll_tim.h **** {
 103:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 0: CC1P */
 104:Inc/stm32f3xx_ll_tim.h ****   2U,            /* 1: CC1NP */
 105:Inc/stm32f3xx_ll_tim.h ****   4U,            /* 2: CC2P */
 106:Inc/stm32f3xx_ll_tim.h ****   6U,            /* 3: CC2NP */
 107:Inc/stm32f3xx_ll_tim.h ****   8U,            /* 4: CC3P */
 108:Inc/stm32f3xx_ll_tim.h ****   10U,           /* 5: CC3NP */
 109:Inc/stm32f3xx_ll_tim.h ****   12U,           /* 6: CC4P */
 110:Inc/stm32f3xx_ll_tim.h ****   16U,           /* 7: CC5P */
 111:Inc/stm32f3xx_ll_tim.h ****   20U            /* 8: CC6P */
 112:Inc/stm32f3xx_ll_tim.h **** };
 113:Inc/stm32f3xx_ll_tim.h **** 
 114:Inc/stm32f3xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OISx[] =
 115:Inc/stm32f3xx_ll_tim.h **** {
 116:Inc/stm32f3xx_ll_tim.h ****   0U,            /* 0: OIS1 */
 117:Inc/stm32f3xx_ll_tim.h ****   1U,            /* 1: OIS1N */
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 15


 118:Inc/stm32f3xx_ll_tim.h ****   2U,            /* 2: OIS2 */
 119:Inc/stm32f3xx_ll_tim.h ****   3U,            /* 3: OIS2N */
 120:Inc/stm32f3xx_ll_tim.h ****   4U,            /* 4: OIS3 */
 121:Inc/stm32f3xx_ll_tim.h ****   5U,            /* 5: OIS3N */
 122:Inc/stm32f3xx_ll_tim.h ****   6U,            /* 6: OIS4 */
 123:Inc/stm32f3xx_ll_tim.h ****   8U,            /* 7: OIS5 */
 124:Inc/stm32f3xx_ll_tim.h ****   10U            /* 8: OIS6 */
 125:Inc/stm32f3xx_ll_tim.h **** };
 126:Inc/stm32f3xx_ll_tim.h **** /**
 127:Inc/stm32f3xx_ll_tim.h ****   * @}
 128:Inc/stm32f3xx_ll_tim.h ****   */
 129:Inc/stm32f3xx_ll_tim.h **** 
 130:Inc/stm32f3xx_ll_tim.h **** 
 131:Inc/stm32f3xx_ll_tim.h **** /* Private constants ---------------------------------------------------------*/
 132:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Constants TIM Private Constants
 133:Inc/stm32f3xx_ll_tim.h ****   * @{
 134:Inc/stm32f3xx_ll_tim.h ****   */
 135:Inc/stm32f3xx_ll_tim.h **** 
 136:Inc/stm32f3xx_ll_tim.h **** 
 137:Inc/stm32f3xx_ll_tim.h **** #define TIMx_OR_RMP_SHIFT 16U
 138:Inc/stm32f3xx_ll_tim.h **** #define TIMx_OR_RMP_MASK  0x0000FFFFU
 139:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM1)
 140:Inc/stm32f3xx_ll_tim.h **** #define TIM1_OR_RMP_MASK   (TIM1_OR_ETR_RMP << TIMx_OR_RMP_SHIFT)
 141:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM1 */
 142:Inc/stm32f3xx_ll_tim.h **** #if defined (TIM8)
 143:Inc/stm32f3xx_ll_tim.h **** #define TIM8_OR_RMP_MASK   (TIM8_OR_ETR_RMP << TIMx_OR_RMP_SHIFT)
 144:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM8 */
 145:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM14)
 146:Inc/stm32f3xx_ll_tim.h **** #define TIM14_OR_RMP_MASK  (TIM14_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
 147:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM14 */
 148:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM16)
 149:Inc/stm32f3xx_ll_tim.h **** #define TIM16_OR_RMP_MASK  (TIM16_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
 150:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM16 */
 151:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM20)
 152:Inc/stm32f3xx_ll_tim.h **** #define TIM20_OR_RMP_MASK  (TIM20_OR_ETR_RMP << TIMx_OR_RMP_SHIFT)
 153:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM20 */
 154:Inc/stm32f3xx_ll_tim.h **** 
 155:Inc/stm32f3xx_ll_tim.h **** /* Mask used to set the TDG[x:0] of the DTG bits of the TIMx_BDTR register */
 156:Inc/stm32f3xx_ll_tim.h **** #define DT_DELAY_1 ((uint8_t)0x7FU)
 157:Inc/stm32f3xx_ll_tim.h **** #define DT_DELAY_2 ((uint8_t)0x3FU)
 158:Inc/stm32f3xx_ll_tim.h **** #define DT_DELAY_3 ((uint8_t)0x1FU)
 159:Inc/stm32f3xx_ll_tim.h **** #define DT_DELAY_4 ((uint8_t)0x1FU)
 160:Inc/stm32f3xx_ll_tim.h **** 
 161:Inc/stm32f3xx_ll_tim.h **** /* Mask used to set the DTG[7:5] bits of the DTG bits of the TIMx_BDTR register */
 162:Inc/stm32f3xx_ll_tim.h **** #define DT_RANGE_1 ((uint8_t)0x00U)
 163:Inc/stm32f3xx_ll_tim.h **** #define DT_RANGE_2 ((uint8_t)0x80U)
 164:Inc/stm32f3xx_ll_tim.h **** #define DT_RANGE_3 ((uint8_t)0xC0U)
 165:Inc/stm32f3xx_ll_tim.h **** #define DT_RANGE_4 ((uint8_t)0xE0U)
 166:Inc/stm32f3xx_ll_tim.h **** 
 167:Inc/stm32f3xx_ll_tim.h **** 
 168:Inc/stm32f3xx_ll_tim.h **** /**
 169:Inc/stm32f3xx_ll_tim.h ****   * @}
 170:Inc/stm32f3xx_ll_tim.h ****   */
 171:Inc/stm32f3xx_ll_tim.h **** 
 172:Inc/stm32f3xx_ll_tim.h **** /* Private macros ------------------------------------------------------------*/
 173:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Macros TIM Private Macros
 174:Inc/stm32f3xx_ll_tim.h ****   * @{
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 16


 175:Inc/stm32f3xx_ll_tim.h ****   */
 176:Inc/stm32f3xx_ll_tim.h **** /** @brief  Convert channel id into channel index.
 177:Inc/stm32f3xx_ll_tim.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 178:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
 179:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
 180:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
 181:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
 182:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
 183:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
 184:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
 185:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
 186:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
 187:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
 188:Inc/stm32f3xx_ll_tim.h ****   * @retval none
 189:Inc/stm32f3xx_ll_tim.h ****   */
 190:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCR5_CCR5)
 191:Inc/stm32f3xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 192:Inc/stm32f3xx_ll_tim.h **** (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 193:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :\
 194:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 195:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :\
 196:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :\
 197:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U :\
 198:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH4) ? 6U :\
 199:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH5) ? 7U : 8U)
 200:Inc/stm32f3xx_ll_tim.h **** #else
 201:Inc/stm32f3xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 202:Inc/stm32f3xx_ll_tim.h **** (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 203:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :\
 204:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 205:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :\
 206:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :\
 207:Inc/stm32f3xx_ll_tim.h **** ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : 6U)
 208:Inc/stm32f3xx_ll_tim.h **** #endif
 209:Inc/stm32f3xx_ll_tim.h **** 
 210:Inc/stm32f3xx_ll_tim.h **** /** @brief  Calculate the deadtime sampling period(in ps).
 211:Inc/stm32f3xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz).
 212:Inc/stm32f3xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 213:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 214:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 215:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 216:Inc/stm32f3xx_ll_tim.h ****   * @retval none
 217:Inc/stm32f3xx_ll_tim.h ****   */
 218:Inc/stm32f3xx_ll_tim.h **** #define TIM_CALC_DTS(__TIMCLK__, __CKD__)                                                        \
 219:Inc/stm32f3xx_ll_tim.h ****     (((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__))         : \
 220:Inc/stm32f3xx_ll_tim.h ****      ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : \
 221:Inc/stm32f3xx_ll_tim.h ****      ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
 222:Inc/stm32f3xx_ll_tim.h **** /**
 223:Inc/stm32f3xx_ll_tim.h ****   * @}
 224:Inc/stm32f3xx_ll_tim.h ****   */
 225:Inc/stm32f3xx_ll_tim.h **** 
 226:Inc/stm32f3xx_ll_tim.h **** 
 227:Inc/stm32f3xx_ll_tim.h **** /* Exported types ------------------------------------------------------------*/
 228:Inc/stm32f3xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 229:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_ES_INIT TIM Exported Init structure
 230:Inc/stm32f3xx_ll_tim.h ****   * @{
 231:Inc/stm32f3xx_ll_tim.h ****   */
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 17


 232:Inc/stm32f3xx_ll_tim.h **** 
 233:Inc/stm32f3xx_ll_tim.h **** /**
 234:Inc/stm32f3xx_ll_tim.h ****   * @brief  TIM Time Base configuration structure definition.
 235:Inc/stm32f3xx_ll_tim.h ****   */
 236:Inc/stm32f3xx_ll_tim.h **** typedef struct
 237:Inc/stm32f3xx_ll_tim.h **** {
 238:Inc/stm32f3xx_ll_tim.h ****   uint16_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
 239:Inc/stm32f3xx_ll_tim.h ****                                    This parameter can be a number between Min_Data=0x0000 and Max_D
 240:Inc/stm32f3xx_ll_tim.h **** 
 241:Inc/stm32f3xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 242:Inc/stm32f3xx_ll_tim.h **** 
 243:Inc/stm32f3xx_ll_tim.h ****   uint32_t CounterMode;       /*!< Specifies the counter mode.
 244:Inc/stm32f3xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_COUNTERMODE.
 245:Inc/stm32f3xx_ll_tim.h **** 
 246:Inc/stm32f3xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 247:Inc/stm32f3xx_ll_tim.h **** 
 248:Inc/stm32f3xx_ll_tim.h ****   uint32_t Autoreload;        /*!< Specifies the auto reload value to be loaded into the active
 249:Inc/stm32f3xx_ll_tim.h ****                                    Auto-Reload Register at the next update event.
 250:Inc/stm32f3xx_ll_tim.h ****                                    This parameter must be a number between Min_Data=0x0000 and Max_
 251:Inc/stm32f3xx_ll_tim.h ****                                    Some timer instances may support 32 bits counters. In that case 
 252:Inc/stm32f3xx_ll_tim.h **** 
 253:Inc/stm32f3xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 254:Inc/stm32f3xx_ll_tim.h **** 
 255:Inc/stm32f3xx_ll_tim.h ****   uint32_t ClockDivision;     /*!< Specifies the clock division.
 256:Inc/stm32f3xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_CLOCKDIVISION.
 257:Inc/stm32f3xx_ll_tim.h **** 
 258:Inc/stm32f3xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 259:Inc/stm32f3xx_ll_tim.h **** 
 260:Inc/stm32f3xx_ll_tim.h ****   uint8_t RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downco
 261:Inc/stm32f3xx_ll_tim.h ****                                    reaches zero, an update event is generated and counting restarts
 262:Inc/stm32f3xx_ll_tim.h ****                                    from the RCR value (N).
 263:Inc/stm32f3xx_ll_tim.h ****                                    This means in PWM mode that (N+1) corresponds to:
 264:Inc/stm32f3xx_ll_tim.h ****                                       - the number of PWM periods in edge-aligned mode
 265:Inc/stm32f3xx_ll_tim.h ****                                       - the number of half PWM period in center-aligned mode
 266:Inc/stm32f3xx_ll_tim.h ****                                    This parameter must be a number between 0x00 and 0xFF.
 267:Inc/stm32f3xx_ll_tim.h **** 
 268:Inc/stm32f3xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 269:Inc/stm32f3xx_ll_tim.h **** } LL_TIM_InitTypeDef;
 270:Inc/stm32f3xx_ll_tim.h **** 
 271:Inc/stm32f3xx_ll_tim.h **** /**
 272:Inc/stm32f3xx_ll_tim.h ****   * @brief  TIM Output Compare configuration structure definition.
 273:Inc/stm32f3xx_ll_tim.h ****   */
 274:Inc/stm32f3xx_ll_tim.h **** typedef struct
 275:Inc/stm32f3xx_ll_tim.h **** {
 276:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCMode;        /*!< Specifies the output mode.
 277:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCMODE.
 278:Inc/stm32f3xx_ll_tim.h **** 
 279:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 280:Inc/stm32f3xx_ll_tim.h **** 
 281:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCState;       /*!< Specifies the TIM Output Compare state.
 282:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 283:Inc/stm32f3xx_ll_tim.h **** 
 284:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions @ref
 285:Inc/stm32f3xx_ll_tim.h **** 
 286:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCNState;      /*!< Specifies the TIM complementary Output Compare state.
 287:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 288:Inc/stm32f3xx_ll_tim.h **** 
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 18


 289:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions @ref
 290:Inc/stm32f3xx_ll_tim.h **** 
 291:Inc/stm32f3xx_ll_tim.h ****   uint32_t CompareValue;  /*!< Specifies the Compare value to be loaded into the Capture Compare Re
 292:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a number between Min_Data=0x0000 and Max_Data=
 293:Inc/stm32f3xx_ll_tim.h **** 
 294:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function LL_TI
 295:Inc/stm32f3xx_ll_tim.h **** 
 296:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCPolarity;    /*!< Specifies the output polarity.
 297:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 298:Inc/stm32f3xx_ll_tim.h **** 
 299:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 300:Inc/stm32f3xx_ll_tim.h **** 
 301:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
 302:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 303:Inc/stm32f3xx_ll_tim.h **** 
 304:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 305:Inc/stm32f3xx_ll_tim.h **** 
 306:Inc/stm32f3xx_ll_tim.h **** 
 307:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
 308:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 309:Inc/stm32f3xx_ll_tim.h **** 
 310:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 311:Inc/stm32f3xx_ll_tim.h **** 
 312:Inc/stm32f3xx_ll_tim.h ****   uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
 313:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 314:Inc/stm32f3xx_ll_tim.h **** 
 315:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 316:Inc/stm32f3xx_ll_tim.h **** } LL_TIM_OC_InitTypeDef;
 317:Inc/stm32f3xx_ll_tim.h **** 
 318:Inc/stm32f3xx_ll_tim.h **** /**
 319:Inc/stm32f3xx_ll_tim.h ****   * @brief  TIM Input Capture configuration structure definition.
 320:Inc/stm32f3xx_ll_tim.h ****   */
 321:Inc/stm32f3xx_ll_tim.h **** 
 322:Inc/stm32f3xx_ll_tim.h **** typedef struct
 323:Inc/stm32f3xx_ll_tim.h **** {
 324:Inc/stm32f3xx_ll_tim.h **** 
 325:Inc/stm32f3xx_ll_tim.h ****   uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
 326:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 327:Inc/stm32f3xx_ll_tim.h **** 
 328:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 329:Inc/stm32f3xx_ll_tim.h **** 
 330:Inc/stm32f3xx_ll_tim.h ****   uint32_t ICActiveInput; /*!< Specifies the input.
 331:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 332:Inc/stm32f3xx_ll_tim.h **** 
 333:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 334:Inc/stm32f3xx_ll_tim.h **** 
 335:Inc/stm32f3xx_ll_tim.h ****   uint32_t ICPrescaler;   /*!< Specifies the Input Capture Prescaler.
 336:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 337:Inc/stm32f3xx_ll_tim.h **** 
 338:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 339:Inc/stm32f3xx_ll_tim.h **** 
 340:Inc/stm32f3xx_ll_tim.h ****   uint32_t ICFilter;      /*!< Specifies the input capture filter.
 341:Inc/stm32f3xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 342:Inc/stm32f3xx_ll_tim.h **** 
 343:Inc/stm32f3xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 344:Inc/stm32f3xx_ll_tim.h **** } LL_TIM_IC_InitTypeDef;
 345:Inc/stm32f3xx_ll_tim.h **** 
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 19


 346:Inc/stm32f3xx_ll_tim.h **** 
 347:Inc/stm32f3xx_ll_tim.h **** /**
 348:Inc/stm32f3xx_ll_tim.h ****   * @brief  TIM Encoder interface configuration structure definition.
 349:Inc/stm32f3xx_ll_tim.h ****   */
 350:Inc/stm32f3xx_ll_tim.h **** typedef struct
 351:Inc/stm32f3xx_ll_tim.h **** {
 352:Inc/stm32f3xx_ll_tim.h ****   uint32_t EncoderMode;     /*!< Specifies the encoder resolution (x2 or x4).
 353:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ENCODERMODE.
 354:Inc/stm32f3xx_ll_tim.h **** 
 355:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 356:Inc/stm32f3xx_ll_tim.h **** 
 357:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1Polarity;     /*!< Specifies the active edge of TI1 input.
 358:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 359:Inc/stm32f3xx_ll_tim.h **** 
 360:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 361:Inc/stm32f3xx_ll_tim.h **** 
 362:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1ActiveInput;  /*!< Specifies the TI1 input source
 363:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 364:Inc/stm32f3xx_ll_tim.h **** 
 365:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 366:Inc/stm32f3xx_ll_tim.h **** 
 367:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1Prescaler;    /*!< Specifies the TI1 input prescaler value.
 368:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 369:Inc/stm32f3xx_ll_tim.h **** 
 370:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 371:Inc/stm32f3xx_ll_tim.h **** 
 372:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1Filter;       /*!< Specifies the TI1 input filter.
 373:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 374:Inc/stm32f3xx_ll_tim.h **** 
 375:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 376:Inc/stm32f3xx_ll_tim.h **** 
 377:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC2Polarity;      /*!< Specifies the active edge of TI2 input.
 378:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 379:Inc/stm32f3xx_ll_tim.h **** 
 380:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 381:Inc/stm32f3xx_ll_tim.h **** 
 382:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC2ActiveInput;  /*!< Specifies the TI2 input source
 383:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 384:Inc/stm32f3xx_ll_tim.h **** 
 385:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 386:Inc/stm32f3xx_ll_tim.h **** 
 387:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC2Prescaler;    /*!< Specifies the TI2 input prescaler value.
 388:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 389:Inc/stm32f3xx_ll_tim.h **** 
 390:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 391:Inc/stm32f3xx_ll_tim.h **** 
 392:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC2Filter;       /*!< Specifies the TI2 input filter.
 393:Inc/stm32f3xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 394:Inc/stm32f3xx_ll_tim.h **** 
 395:Inc/stm32f3xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 396:Inc/stm32f3xx_ll_tim.h **** 
 397:Inc/stm32f3xx_ll_tim.h **** } LL_TIM_ENCODER_InitTypeDef;
 398:Inc/stm32f3xx_ll_tim.h **** 
 399:Inc/stm32f3xx_ll_tim.h **** /**
 400:Inc/stm32f3xx_ll_tim.h ****   * @brief  TIM Hall sensor interface configuration structure definition.
 401:Inc/stm32f3xx_ll_tim.h ****   */
 402:Inc/stm32f3xx_ll_tim.h **** typedef struct
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 20


 403:Inc/stm32f3xx_ll_tim.h **** {
 404:Inc/stm32f3xx_ll_tim.h **** 
 405:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1Polarity;        /*!< Specifies the active edge of TI1 input.
 406:Inc/stm32f3xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 407:Inc/stm32f3xx_ll_tim.h **** 
 408:Inc/stm32f3xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 409:Inc/stm32f3xx_ll_tim.h **** 
 410:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1Prescaler;       /*!< Specifies the TI1 input prescaler value.
 411:Inc/stm32f3xx_ll_tim.h ****                                     Prescaler must be set to get a maximum counter period longer th
 412:Inc/stm32f3xx_ll_tim.h ****                                     time interval between 2 consecutive changes on the Hall inputs.
 413:Inc/stm32f3xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 414:Inc/stm32f3xx_ll_tim.h **** 
 415:Inc/stm32f3xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 416:Inc/stm32f3xx_ll_tim.h **** 
 417:Inc/stm32f3xx_ll_tim.h ****   uint32_t IC1Filter;          /*!< Specifies the TI1 input filter.
 418:Inc/stm32f3xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 419:Inc/stm32f3xx_ll_tim.h **** 
 420:Inc/stm32f3xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 421:Inc/stm32f3xx_ll_tim.h **** 
 422:Inc/stm32f3xx_ll_tim.h ****   uint32_t CommutationDelay;   /*!< Specifies the compare value to be loaded into the Capture Compa
 423:Inc/stm32f3xx_ll_tim.h ****                                     A positive pulse (TRGO event) is generated with a programmable 
 424:Inc/stm32f3xx_ll_tim.h ****                                     a change occurs on the Hall inputs.
 425:Inc/stm32f3xx_ll_tim.h ****                                     This parameter can be a number between Min_Data = 0x0000 and Ma
 426:Inc/stm32f3xx_ll_tim.h **** 
 427:Inc/stm32f3xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 428:Inc/stm32f3xx_ll_tim.h **** } LL_TIM_HALLSENSOR_InitTypeDef;
 429:Inc/stm32f3xx_ll_tim.h **** 
 430:Inc/stm32f3xx_ll_tim.h **** /**
 431:Inc/stm32f3xx_ll_tim.h ****   * @brief  BDTR (Break and Dead Time) structure definition
 432:Inc/stm32f3xx_ll_tim.h ****   */
 433:Inc/stm32f3xx_ll_tim.h **** typedef struct
 434:Inc/stm32f3xx_ll_tim.h **** {
 435:Inc/stm32f3xx_ll_tim.h ****   uint32_t OSSRState;            /*!< Specifies the Off-State selection used in Run mode.
 436:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSR
 437:Inc/stm32f3xx_ll_tim.h **** 
 438:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 439:Inc/stm32f3xx_ll_tim.h **** 
 440:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 441:Inc/stm32f3xx_ll_tim.h **** 
 442:Inc/stm32f3xx_ll_tim.h ****   uint32_t OSSIState;            /*!< Specifies the Off-State used in Idle state.
 443:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSI
 444:Inc/stm32f3xx_ll_tim.h **** 
 445:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 446:Inc/stm32f3xx_ll_tim.h **** 
 447:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 448:Inc/stm32f3xx_ll_tim.h **** 
 449:Inc/stm32f3xx_ll_tim.h ****   uint32_t LockLevel;            /*!< Specifies the LOCK level parameters.
 450:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_LOCKLEVEL
 451:Inc/stm32f3xx_ll_tim.h **** 
 452:Inc/stm32f3xx_ll_tim.h ****                                       @note The LOCK bits can be written only once after the reset.
 453:Inc/stm32f3xx_ll_tim.h ****                                             has been written, their content is frozen until the nex
 454:Inc/stm32f3xx_ll_tim.h **** 
 455:Inc/stm32f3xx_ll_tim.h ****   uint8_t DeadTime;              /*!< Specifies the delay time between the switching-off and the
 456:Inc/stm32f3xx_ll_tim.h ****                                       switching-on of the outputs.
 457:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a number between Min_Data = 0x00 and Ma
 458:Inc/stm32f3xx_ll_tim.h **** 
 459:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 21


 460:Inc/stm32f3xx_ll_tim.h **** 
 461:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 462:Inc/stm32f3xx_ll_tim.h **** 
 463:Inc/stm32f3xx_ll_tim.h ****   uint16_t BreakState;           /*!< Specifies whether the TIM Break input is enabled or not.
 464:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_ENABLE
 465:Inc/stm32f3xx_ll_tim.h **** 
 466:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 467:Inc/stm32f3xx_ll_tim.h **** 
 468:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 469:Inc/stm32f3xx_ll_tim.h **** 
 470:Inc/stm32f3xx_ll_tim.h ****   uint32_t BreakPolarity;        /*!< Specifies the TIM Break Input pin polarity.
 471:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_POLARIT
 472:Inc/stm32f3xx_ll_tim.h **** 
 473:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 474:Inc/stm32f3xx_ll_tim.h **** 
 475:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 476:Inc/stm32f3xx_ll_tim.h **** 
 477:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_BDTR_BKF)
 478:Inc/stm32f3xx_ll_tim.h ****   uint32_t BreakFilter;          /*!< Specifies the TIM Break Filter.
 479:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_FILTER
 480:Inc/stm32f3xx_ll_tim.h **** 
 481:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 482:Inc/stm32f3xx_ll_tim.h **** 
 483:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 484:Inc/stm32f3xx_ll_tim.h **** 
 485:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_BDTR_BKF */
 486:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_BDTR_BK2E)
 487:Inc/stm32f3xx_ll_tim.h ****   uint32_t Break2State;          /*!< Specifies whether the TIM Break2 input is enabled or not.
 488:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK2_ENABLE
 489:Inc/stm32f3xx_ll_tim.h **** 
 490:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 491:Inc/stm32f3xx_ll_tim.h **** 
 492:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 493:Inc/stm32f3xx_ll_tim.h **** 
 494:Inc/stm32f3xx_ll_tim.h ****   uint32_t Break2Polarity;        /*!< Specifies the TIM Break2 Input pin polarity.
 495:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK2_POLARI
 496:Inc/stm32f3xx_ll_tim.h **** 
 497:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 498:Inc/stm32f3xx_ll_tim.h **** 
 499:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 500:Inc/stm32f3xx_ll_tim.h **** 
 501:Inc/stm32f3xx_ll_tim.h ****   uint32_t Break2Filter;          /*!< Specifies the TIM Break2 Filter.
 502:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK2_FILTER
 503:Inc/stm32f3xx_ll_tim.h **** 
 504:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 505:Inc/stm32f3xx_ll_tim.h **** 
 506:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 507:Inc/stm32f3xx_ll_tim.h **** 
 508:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_BDTR_BK2E */
 509:Inc/stm32f3xx_ll_tim.h ****   uint32_t AutomaticOutput;      /*!< Specifies whether the TIM Automatic Output feature is enabled
 510:Inc/stm32f3xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_AUTOMATICOUTP
 511:Inc/stm32f3xx_ll_tim.h **** 
 512:Inc/stm32f3xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 513:Inc/stm32f3xx_ll_tim.h **** 
 514:Inc/stm32f3xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 515:Inc/stm32f3xx_ll_tim.h **** } LL_TIM_BDTR_InitTypeDef;
 516:Inc/stm32f3xx_ll_tim.h **** 
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 22


 517:Inc/stm32f3xx_ll_tim.h **** /**
 518:Inc/stm32f3xx_ll_tim.h ****   * @}
 519:Inc/stm32f3xx_ll_tim.h ****   */
 520:Inc/stm32f3xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 521:Inc/stm32f3xx_ll_tim.h **** 
 522:Inc/stm32f3xx_ll_tim.h **** /* Exported constants --------------------------------------------------------*/
 523:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Constants TIM Exported Constants
 524:Inc/stm32f3xx_ll_tim.h ****   * @{
 525:Inc/stm32f3xx_ll_tim.h ****   */
 526:Inc/stm32f3xx_ll_tim.h **** 
 527:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GET_FLAG Get Flags Defines
 528:Inc/stm32f3xx_ll_tim.h ****   * @brief    Flags defines which can be used with LL_TIM_ReadReg function.
 529:Inc/stm32f3xx_ll_tim.h ****   * @{
 530:Inc/stm32f3xx_ll_tim.h ****   */
 531:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_UIF                          TIM_SR_UIF           /*!< Update interrupt flag */
 532:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC1IF                        TIM_SR_CC1IF         /*!< Capture/compare 1 interrup
 533:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC2IF                        TIM_SR_CC2IF         /*!< Capture/compare 2 interrup
 534:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC3IF                        TIM_SR_CC3IF         /*!< Capture/compare 3 interrup
 535:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC4IF                        TIM_SR_CC4IF         /*!< Capture/compare 4 interrup
 536:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCMR1_OC1M_3)
 537:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC5IF                        TIM_SR_CC5IF         /*!< Capture/compare 5 interrup
 538:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC6IF                        TIM_SR_CC6IF         /*!< Capture/compare 6 interrup
 539:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_CCMR1_OC1M_3 */
 540:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_COMIF                        TIM_SR_COMIF         /*!< COM interrupt flag */
 541:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_TIF                          TIM_SR_TIF           /*!< Trigger interrupt flag */
 542:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_BIF                          TIM_SR_BIF           /*!< Break interrupt flag */
 543:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_B2IF                         TIM_SR_B2IF          /*!< Second break interrupt fla
 544:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC1OF                        TIM_SR_CC1OF         /*!< Capture/Compare 1 overcapt
 545:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC2OF                        TIM_SR_CC2OF         /*!< Capture/Compare 2 overcapt
 546:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC3OF                        TIM_SR_CC3OF         /*!< Capture/Compare 3 overcapt
 547:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SR_CC4OF                        TIM_SR_CC4OF         /*!< Capture/Compare 4 overcapt
 548:Inc/stm32f3xx_ll_tim.h **** /**
 549:Inc/stm32f3xx_ll_tim.h ****   * @}
 550:Inc/stm32f3xx_ll_tim.h ****   */
 551:Inc/stm32f3xx_ll_tim.h **** 
 552:Inc/stm32f3xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 553:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_ENABLE Break Enable
 554:Inc/stm32f3xx_ll_tim.h ****   * @{
 555:Inc/stm32f3xx_ll_tim.h ****   */
 556:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_DISABLE            0x00000000U             /*!< Break function disabled */
 557:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_ENABLE             TIM_BDTR_BKE            /*!< Break function enabled */
 558:Inc/stm32f3xx_ll_tim.h **** /**
 559:Inc/stm32f3xx_ll_tim.h ****   * @}
 560:Inc/stm32f3xx_ll_tim.h ****   */
 561:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_BDTR_BK2E)
 562:Inc/stm32f3xx_ll_tim.h **** 
 563:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK2_ENABLE Break2 Enable
 564:Inc/stm32f3xx_ll_tim.h ****   * @{
 565:Inc/stm32f3xx_ll_tim.h ****   */
 566:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_DISABLE            0x00000000U              /*!< Break2 function disabled */
 567:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_ENABLE             TIM_BDTR_BK2E            /*!< Break2 function enabled */
 568:Inc/stm32f3xx_ll_tim.h **** /**
 569:Inc/stm32f3xx_ll_tim.h ****   * @}
 570:Inc/stm32f3xx_ll_tim.h ****   */
 571:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_BDTR_BK2E */
 572:Inc/stm32f3xx_ll_tim.h **** 
 573:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_AUTOMATICOUTPUT_ENABLE Automatic output enable
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 23


 574:Inc/stm32f3xx_ll_tim.h ****   * @{
 575:Inc/stm32f3xx_ll_tim.h ****   */
 576:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_DISABLE         0x00000000U             /*!< MOE can be set only by 
 577:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_ENABLE          TIM_BDTR_AOE            /*!< MOE can be set by softw
 578:Inc/stm32f3xx_ll_tim.h **** /**
 579:Inc/stm32f3xx_ll_tim.h ****   * @}
 580:Inc/stm32f3xx_ll_tim.h ****   */
 581:Inc/stm32f3xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 582:Inc/stm32f3xx_ll_tim.h **** 
 583:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IT IT Defines
 584:Inc/stm32f3xx_ll_tim.h ****   * @brief    IT defines which can be used with LL_TIM_ReadReg and  LL_TIM_WriteReg functions.
 585:Inc/stm32f3xx_ll_tim.h ****   * @{
 586:Inc/stm32f3xx_ll_tim.h ****   */
 587:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_UIE                        TIM_DIER_UIE         /*!< Update interrupt enable */
 588:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_CC1IE                      TIM_DIER_CC1IE       /*!< Capture/compare 1 interrup
 589:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_CC2IE                      TIM_DIER_CC2IE       /*!< Capture/compare 2 interrup
 590:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_CC3IE                      TIM_DIER_CC3IE       /*!< Capture/compare 3 interrup
 591:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_CC4IE                      TIM_DIER_CC4IE       /*!< Capture/compare 4 interrup
 592:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_COMIE                      TIM_DIER_COMIE       /*!< COM interrupt enable */
 593:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_TIE                        TIM_DIER_TIE         /*!< Trigger interrupt enable *
 594:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DIER_BIE                        TIM_DIER_BIE         /*!< Break interrupt enable */
 595:Inc/stm32f3xx_ll_tim.h **** /**
 596:Inc/stm32f3xx_ll_tim.h ****   * @}
 597:Inc/stm32f3xx_ll_tim.h ****   */
 598:Inc/stm32f3xx_ll_tim.h **** 
 599:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_UPDATESOURCE Update Source
 600:Inc/stm32f3xx_ll_tim.h ****   * @{
 601:Inc/stm32f3xx_ll_tim.h ****   */
 602:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_REGULAR            0x00000000U          /*!< Counter overflow/underflow
 603:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_COUNTER            TIM_CR1_URS          /*!< Only counter overflow/unde
 604:Inc/stm32f3xx_ll_tim.h **** /**
 605:Inc/stm32f3xx_ll_tim.h ****   * @}
 606:Inc/stm32f3xx_ll_tim.h ****   */
 607:Inc/stm32f3xx_ll_tim.h **** 
 608:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ONEPULSEMODE One Pulse Mode
 609:Inc/stm32f3xx_ll_tim.h ****   * @{
 610:Inc/stm32f3xx_ll_tim.h ****   */
 611:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_SINGLE             TIM_CR1_OPM          /*!< Counter is not stopped at 
 612:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_REPETITIVE         0x00000000U          /*!< Counter stops counting at 
 613:Inc/stm32f3xx_ll_tim.h **** /**
 614:Inc/stm32f3xx_ll_tim.h ****   * @}
 615:Inc/stm32f3xx_ll_tim.h ****   */
 616:Inc/stm32f3xx_ll_tim.h **** 
 617:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERMODE Counter Mode
 618:Inc/stm32f3xx_ll_tim.h ****   * @{
 619:Inc/stm32f3xx_ll_tim.h ****   */
 620:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_UP                  0x00000000U          /*!<Counter used as upcounter *
 621:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_DOWN                TIM_CR1_DIR          /*!< Counter used as downcounte
 622:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP           TIM_CR1_CMS_0        /*!< The counter counts up and 
 623:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_DOWN         TIM_CR1_CMS_1        /*!<The counter counts up and d
 624:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP_DOWN      TIM_CR1_CMS          /*!< The counter counts up and 
 625:Inc/stm32f3xx_ll_tim.h **** /**
 626:Inc/stm32f3xx_ll_tim.h ****   * @}
 627:Inc/stm32f3xx_ll_tim.h ****   */
 628:Inc/stm32f3xx_ll_tim.h **** 
 629:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKDIVISION Clock Division
 630:Inc/stm32f3xx_ll_tim.h ****   * @{
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 24


 631:Inc/stm32f3xx_ll_tim.h ****   */
 632:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV1              0x00000000U          /*!< tDTS=tCK_INT */
 633:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV2              TIM_CR1_CKD_0        /*!< tDTS=2*tCK_INT */
 634:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV4              TIM_CR1_CKD_1        /*!< tDTS=4*tCK_INT */
 635:Inc/stm32f3xx_ll_tim.h **** /**
 636:Inc/stm32f3xx_ll_tim.h ****   * @}
 637:Inc/stm32f3xx_ll_tim.h ****   */
 638:Inc/stm32f3xx_ll_tim.h **** 
 639:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERDIRECTION Counter Direction
 640:Inc/stm32f3xx_ll_tim.h ****   * @{
 641:Inc/stm32f3xx_ll_tim.h ****   */
 642:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_UP             0x00000000U          /*!< Timer counter counts up */
 643:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_DOWN           TIM_CR1_DIR          /*!< Timer counter counts down 
 644:Inc/stm32f3xx_ll_tim.h **** /**
 645:Inc/stm32f3xx_ll_tim.h ****   * @}
 646:Inc/stm32f3xx_ll_tim.h ****   */
 647:Inc/stm32f3xx_ll_tim.h **** 
 648:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCUPDATESOURCE Capture Compare  Update Source
 649:Inc/stm32f3xx_ll_tim.h ****   * @{
 650:Inc/stm32f3xx_ll_tim.h ****   */
 651:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_ONLY        0x00000000U          /*!< Capture/compare control bi
 652:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI    TIM_CR2_CCUS         /*!< Capture/compare control bi
 653:Inc/stm32f3xx_ll_tim.h **** /**
 654:Inc/stm32f3xx_ll_tim.h ****   * @}
 655:Inc/stm32f3xx_ll_tim.h ****   */
 656:Inc/stm32f3xx_ll_tim.h **** 
 657:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCDMAREQUEST Capture Compare DMA Request
 658:Inc/stm32f3xx_ll_tim.h ****   * @{
 659:Inc/stm32f3xx_ll_tim.h ****   */
 660:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_CC                 0x00000000U          /*!< CCx DMA request sent when 
 661:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_UPDATE             TIM_CR2_CCDS         /*!< CCx DMA requests sent when
 662:Inc/stm32f3xx_ll_tim.h **** /**
 663:Inc/stm32f3xx_ll_tim.h ****   * @}
 664:Inc/stm32f3xx_ll_tim.h ****   */
 665:Inc/stm32f3xx_ll_tim.h **** 
 666:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_LOCKLEVEL Lock Level
 667:Inc/stm32f3xx_ll_tim.h ****   * @{
 668:Inc/stm32f3xx_ll_tim.h ****   */
 669:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_OFF                   0x00000000U          /*!< LOCK OFF - No bit is write
 670:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_1                     TIM_BDTR_LOCK_0      /*!< LOCK Level 1 */
 671:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_2                     TIM_BDTR_LOCK_1      /*!< LOCK Level 2 */
 672:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_3                     TIM_BDTR_LOCK        /*!< LOCK Level 3 */
 673:Inc/stm32f3xx_ll_tim.h **** /**
 674:Inc/stm32f3xx_ll_tim.h ****   * @}
 675:Inc/stm32f3xx_ll_tim.h ****   */
 676:Inc/stm32f3xx_ll_tim.h **** 
 677:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CHANNEL Channel
 678:Inc/stm32f3xx_ll_tim.h ****   * @{
 679:Inc/stm32f3xx_ll_tim.h ****   */
 680:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCMR1_OC1M_3)
 681:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 682:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1N                    TIM_CCER_CC1NE    /*!< Timer complementary output ch
 683:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 684:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2N                    TIM_CCER_CC2NE    /*!< Timer complementary output ch
 685:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 686:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3N                    TIM_CCER_CC3NE    /*!< Timer complementary output ch
 687:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 25


 688:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH5                     TIM_CCER_CC5E     /*!< Timer output channel 5 */
 689:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH6                     TIM_CCER_CC6E     /*!< Timer output channel 6 */
 690:Inc/stm32f3xx_ll_tim.h **** #else
 691:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 692:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1N                    TIM_CCER_CC1NE    /*!< Timer complementary output ch
 693:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 694:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2N                    TIM_CCER_CC2NE    /*!< Timer complementary output ch
 695:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 696:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3N                    TIM_CCER_CC3NE    /*!< Timer complementary output ch
 697:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
 698:Inc/stm32f3xx_ll_tim.h **** #endif
 699:Inc/stm32f3xx_ll_tim.h **** /**
 700:Inc/stm32f3xx_ll_tim.h ****   * @}
 701:Inc/stm32f3xx_ll_tim.h ****   */
 702:Inc/stm32f3xx_ll_tim.h **** 
 703:Inc/stm32f3xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 704:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCSTATE Output Configuration State
 705:Inc/stm32f3xx_ll_tim.h ****   * @{
 706:Inc/stm32f3xx_ll_tim.h ****   */
 707:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCSTATE_DISABLE                 0x00000000U             /*!< OCx is not active */
 708:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCSTATE_ENABLE                  TIM_CCER_CC1E           /*!< OCx signal is output on
 709:Inc/stm32f3xx_ll_tim.h **** /**
 710:Inc/stm32f3xx_ll_tim.h ****   * @}
 711:Inc/stm32f3xx_ll_tim.h ****   */
 712:Inc/stm32f3xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 713:Inc/stm32f3xx_ll_tim.h **** 
 714:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCMODE Output Configuration Mode
 715:Inc/stm32f3xx_ll_tim.h ****   * @{
 716:Inc/stm32f3xx_ll_tim.h ****   */
 717:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_FROZEN                   0x00000000U                                         
 718:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_ACTIVE                   TIM_CCMR1_OC1M_0                                    
 719:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_INACTIVE                 TIM_CCMR1_OC1M_1                                    
 720:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)               
 721:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_INACTIVE          TIM_CCMR1_OC1M_2                                    
 722:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)               
 723:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)               
 724:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 725:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCMR1_OC1M_3)
 726:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_RETRIG_OPM1              TIM_CCMR1_OC1M_3                                    
 727:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_RETRIG_OPM2              (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_0)               
 728:Inc/stm32f3xx_ll_tim.h **** #endif
 729:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCMR1_OC1M_3)
 730:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_COMBINED_PWM1            (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_2)               
 731:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_COMBINED_PWM2            (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1
 732:Inc/stm32f3xx_ll_tim.h **** #endif
 733:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCMR1_OC1M_3)
 734:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_ASSYMETRIC_PWM1          (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 735:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCMODE_ASSYMETRIC_PWM2          (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M)                 
 736:Inc/stm32f3xx_ll_tim.h **** #endif
 737:Inc/stm32f3xx_ll_tim.h **** /**
 738:Inc/stm32f3xx_ll_tim.h ****   * @}
 739:Inc/stm32f3xx_ll_tim.h ****   */
 740:Inc/stm32f3xx_ll_tim.h **** 
 741:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCPOLARITY Output Configuration Polarity
 742:Inc/stm32f3xx_ll_tim.h ****   * @{
 743:Inc/stm32f3xx_ll_tim.h ****   */
 744:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_HIGH                 0x00000000U                 /*!< OCxactive high*/
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 26


 745:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_LOW                  TIM_CCER_CC1P               /*!< OCxactive low*/
 746:Inc/stm32f3xx_ll_tim.h **** /**
 747:Inc/stm32f3xx_ll_tim.h ****   * @}
 748:Inc/stm32f3xx_ll_tim.h ****   */
 749:Inc/stm32f3xx_ll_tim.h **** 
 750:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCIDLESTATE Output Configuration Idle State
 751:Inc/stm32f3xx_ll_tim.h ****   * @{
 752:Inc/stm32f3xx_ll_tim.h ****   */
 753:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_LOW                 0x00000000U             /*!<OCx=0 (after a dead-time
 754:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_HIGH                TIM_CR2_OIS1            /*!<OCx=1 (after a dead-time
 755:Inc/stm32f3xx_ll_tim.h **** /**
 756:Inc/stm32f3xx_ll_tim.h ****   * @}
 757:Inc/stm32f3xx_ll_tim.h ****   */
 758:Inc/stm32f3xx_ll_tim.h **** 
 759:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCR5_CCR5)
 760:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GROUPCH5 GROUPCH5
 761:Inc/stm32f3xx_ll_tim.h ****   * @{
 762:Inc/stm32f3xx_ll_tim.h ****   */
 763:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_GROUPCH5_NONE                   0x00000000U           /*!< No effect of OC5REF on OC
 764:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_GROUPCH5_OC1REFC                TIM_CCR5_GC5C1        /*!< OC1REFC is the logical AN
 765:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_GROUPCH5_OC2REFC                TIM_CCR5_GC5C2        /*!< OC2REFC is the logical AN
 766:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_GROUPCH5_OC3REFC                TIM_CCR5_GC5C3        /*!< OC3REFC is the logical AN
 767:Inc/stm32f3xx_ll_tim.h **** /**
 768:Inc/stm32f3xx_ll_tim.h ****   * @}
 769:Inc/stm32f3xx_ll_tim.h ****   */
 770:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_CCR5_CCR5 */
 771:Inc/stm32f3xx_ll_tim.h **** 
 772:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ACTIVEINPUT Active Input Selection
 773:Inc/stm32f3xx_ll_tim.h ****   * @{
 774:Inc/stm32f3xx_ll_tim.h ****   */
 775:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_DIRECTTI            (TIM_CCMR1_CC1S_0 << 16U) /*!< ICx is mapped on TIx 
 776:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_INDIRECTTI          (TIM_CCMR1_CC1S_1 << 16U) /*!< ICx is mapped on TIy 
 777:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_TRC                 (TIM_CCMR1_CC1S << 16U)   /*!< ICx is mapped on TRC 
 778:Inc/stm32f3xx_ll_tim.h **** /**
 779:Inc/stm32f3xx_ll_tim.h ****   * @}
 780:Inc/stm32f3xx_ll_tim.h ****   */
 781:Inc/stm32f3xx_ll_tim.h **** 
 782:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ICPSC Input Configuration Prescaler
 783:Inc/stm32f3xx_ll_tim.h ****   * @{
 784:Inc/stm32f3xx_ll_tim.h ****   */
 785:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV1                      0x00000000U                              /*!< No pre
 786:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV2                      (TIM_CCMR1_IC1PSC_0 << 16U)    /*!< Capture is done 
 787:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV4                      (TIM_CCMR1_IC1PSC_1 << 16U)    /*!< Capture is done 
 788:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV8                      (TIM_CCMR1_IC1PSC << 16U)      /*!< Capture is done 
 789:Inc/stm32f3xx_ll_tim.h **** /**
 790:Inc/stm32f3xx_ll_tim.h ****   * @}
 791:Inc/stm32f3xx_ll_tim.h ****   */
 792:Inc/stm32f3xx_ll_tim.h **** 
 793:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_FILTER Input Configuration Filter
 794:Inc/stm32f3xx_ll_tim.h ****   * @{
 795:Inc/stm32f3xx_ll_tim.h ****   */
 796:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1                 0x00000000U                                         
 797:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N2              (TIM_CCMR1_IC1F_0 << 16U)                           
 798:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N4              (TIM_CCMR1_IC1F_1 << 16U)                           
 799:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N8              ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)      
 800:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N6              (TIM_CCMR1_IC1F_2 << 16U)                           
 801:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)      
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 27


 802:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N6              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)      
 803:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 804:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N6              (TIM_CCMR1_IC1F_3 << 16U)                           
 805:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N8              ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)      
 806:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)      
 807:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 808:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N8             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)      
 809:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 810:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 811:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N8             (TIM_CCMR1_IC1F << 16U)                             
 812:Inc/stm32f3xx_ll_tim.h **** /**
 813:Inc/stm32f3xx_ll_tim.h ****   * @}
 814:Inc/stm32f3xx_ll_tim.h ****   */
 815:Inc/stm32f3xx_ll_tim.h **** 
 816:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_POLARITY Input Configuration Polarity
 817:Inc/stm32f3xx_ll_tim.h ****   * @{
 818:Inc/stm32f3xx_ll_tim.h ****   */
 819:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_RISING              0x00000000U                      /*!< The circuit is
 820:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_FALLING             TIM_CCER_CC1P                    /*!< The circuit is
 821:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_BOTHEDGE            (TIM_CCER_CC1P | TIM_CCER_CC1NP) /*!< The circuit is
 822:Inc/stm32f3xx_ll_tim.h **** /**
 823:Inc/stm32f3xx_ll_tim.h ****   * @}
 824:Inc/stm32f3xx_ll_tim.h ****   */
 825:Inc/stm32f3xx_ll_tim.h **** 
 826:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKSOURCE Clock Source
 827:Inc/stm32f3xx_ll_tim.h ****   * @{
 828:Inc/stm32f3xx_ll_tim.h ****   */
 829:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_INTERNAL            0x00000000U                                         
 830:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE1           (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)  
 831:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE2           TIM_SMCR_ECE                                        
 832:Inc/stm32f3xx_ll_tim.h **** /**
 833:Inc/stm32f3xx_ll_tim.h ****   * @}
 834:Inc/stm32f3xx_ll_tim.h ****   */
 835:Inc/stm32f3xx_ll_tim.h **** 
 836:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ENCODERMODE Encoder Mode
 837:Inc/stm32f3xx_ll_tim.h ****   * @{
 838:Inc/stm32f3xx_ll_tim.h ****   */
 839:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI1              TIM_SMCR_SMS_0                    /*!< Encoder mode 
 840:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI2              TIM_SMCR_SMS_1                    /*!< Encoder mode 
 841:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X4_TI12             (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0) /*!< Encoder mode 
 842:Inc/stm32f3xx_ll_tim.h **** /**
 843:Inc/stm32f3xx_ll_tim.h ****   * @}
 844:Inc/stm32f3xx_ll_tim.h ****   */
 845:Inc/stm32f3xx_ll_tim.h **** 
 846:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO Trigger Output
 847:Inc/stm32f3xx_ll_tim.h ****   * @{
 848:Inc/stm32f3xx_ll_tim.h ****   */
 849:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_RESET                      0x00000000U                                     /*!<
 850:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_ENABLE                     TIM_CR2_MMS_0                                   /*!<
 851:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_UPDATE                     TIM_CR2_MMS_1                                   /*!<
 852:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_CC1IF                      (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)                 /*!<
 853:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_OC1REF                     TIM_CR2_MMS_2                                   /*!<
 854:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_OC2REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)                 /*!<
 855:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_OC3REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)                 /*!<
 856:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO_OC4REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0) /*!<
 857:Inc/stm32f3xx_ll_tim.h **** /**
 858:Inc/stm32f3xx_ll_tim.h ****   * @}
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 28


 859:Inc/stm32f3xx_ll_tim.h ****   */
 860:Inc/stm32f3xx_ll_tim.h **** 
 861:Inc/stm32f3xx_ll_tim.h **** #if   defined(TIM_CR2_MMS2)
 862:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO2 Trigger Output 2
 863:Inc/stm32f3xx_ll_tim.h ****   * @{
 864:Inc/stm32f3xx_ll_tim.h ****   */
 865:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_RESET                     0x00000000U                                         
 866:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_ENABLE                    TIM_CR2_MMS2_0                                      
 867:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_UPDATE                    TIM_CR2_MMS2_1                                      
 868:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_CC1F                      (TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)                   
 869:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC1                       TIM_CR2_MMS2_2                                      
 870:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC2                       (TIM_CR2_MMS2_2 | TIM_CR2_MMS2_0)                   
 871:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC3                       (TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1)                   
 872:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC4                       (TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)  
 873:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC5                       TIM_CR2_MMS2_3                                      
 874:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC6                       (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_0)                   
 875:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC4_RISINGFALLING         (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_1)                   
 876:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC6_RISINGFALLING         (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)  
 877:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC4_RISING_OC6_RISING     (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2)                   
 878:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC4_RISING_OC6_FALLING    (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 | TIM_CR2_MMS2_0)  
 879:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC5_RISING_OC6_RISING     (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 |TIM_CR2_MMS2_1)   
 880:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TRGO2_OC5_RISING_OC6_FALLING    (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1 | 
 881:Inc/stm32f3xx_ll_tim.h **** /**
 882:Inc/stm32f3xx_ll_tim.h ****   * @}
 883:Inc/stm32f3xx_ll_tim.h ****   */
 884:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_CR2_MMS2 */
 885:Inc/stm32f3xx_ll_tim.h **** 
 886:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_SLAVEMODE Slave Mode
 887:Inc/stm32f3xx_ll_tim.h ****   * @{
 888:Inc/stm32f3xx_ll_tim.h ****   */
 889:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_DISABLED              0x00000000U                         /*!< Slave mode 
 890:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_RESET                 TIM_SMCR_SMS_2                      /*!< Reset Mode 
 891:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_GATED                 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)   /*!< Gated Mode 
 892:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_TRIGGER               (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)   /*!< Trigger Mod
 893:Inc/stm32f3xx_ll_tim.h **** #if  defined (TIM_SMCR_SMS_3)
 894:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_COMBINED_RESETTRIGGER TIM_SMCR_SMS_3                      /*!< Combined re
 895:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_SMCR_SMS_3 */
 896:Inc/stm32f3xx_ll_tim.h **** /**
 897:Inc/stm32f3xx_ll_tim.h ****   * @}
 898:Inc/stm32f3xx_ll_tim.h ****   */
 899:Inc/stm32f3xx_ll_tim.h **** 
 900:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TS Trigger Selection
 901:Inc/stm32f3xx_ll_tim.h ****   * @{
 902:Inc/stm32f3xx_ll_tim.h ****   */
 903:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_ITR0                         0x00000000U                                      /*!
 904:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_ITR1                         TIM_SMCR_TS_0                                    /*!
 905:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_ITR2                         TIM_SMCR_TS_1                                    /*!
 906:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_ITR3                         (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)                  /*!
 907:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_TI1F_ED                      TIM_SMCR_TS_2                                    /*!
 908:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_TI1FP1                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)                  /*!
 909:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_TI2FP2                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)                  /*!
 910:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TS_ETRF                         (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)  /*!
 911:Inc/stm32f3xx_ll_tim.h **** /**
 912:Inc/stm32f3xx_ll_tim.h ****   * @}
 913:Inc/stm32f3xx_ll_tim.h ****   */
 914:Inc/stm32f3xx_ll_tim.h **** 
 915:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_POLARITY External Trigger Polarity
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 29


 916:Inc/stm32f3xx_ll_tim.h ****   * @{
 917:Inc/stm32f3xx_ll_tim.h ****   */
 918:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_NONINVERTED        0x00000000U             /*!< ETR is non-inverted, ac
 919:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_INVERTED           TIM_SMCR_ETP            /*!< ETR is inverted, active
 920:Inc/stm32f3xx_ll_tim.h **** /**
 921:Inc/stm32f3xx_ll_tim.h ****   * @}
 922:Inc/stm32f3xx_ll_tim.h ****   */
 923:Inc/stm32f3xx_ll_tim.h **** 
 924:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_PRESCALER External Trigger Prescaler
 925:Inc/stm32f3xx_ll_tim.h ****   * @{
 926:Inc/stm32f3xx_ll_tim.h ****   */
 927:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV1              0x00000000U             /*!< ETR prescaler OFF */
 928:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV2              TIM_SMCR_ETPS_0         /*!< ETR frequency is divide
 929:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV4              TIM_SMCR_ETPS_1         /*!< ETR frequency is divide
 930:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV8              TIM_SMCR_ETPS           /*!< ETR frequency is divide
 931:Inc/stm32f3xx_ll_tim.h **** /**
 932:Inc/stm32f3xx_ll_tim.h ****   * @}
 933:Inc/stm32f3xx_ll_tim.h ****   */
 934:Inc/stm32f3xx_ll_tim.h **** 
 935:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_FILTER External Trigger Filter
 936:Inc/stm32f3xx_ll_tim.h ****   * @{
 937:Inc/stm32f3xx_ll_tim.h ****   */
 938:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1                0x00000000U                                         
 939:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N2             TIM_SMCR_ETF_0                                      
 940:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N4             TIM_SMCR_ETF_1                                      
 941:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N8             (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)                   
 942:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N6             TIM_SMCR_ETF_2                                      
 943:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)                   
 944:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N6             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)                   
 945:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 946:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N6             TIM_SMCR_ETF_3                                      
 947:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N8             (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)                   
 948:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)                   
 949:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 950:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N8            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)                   
 951:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)  
 952:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)  
 953:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N8            TIM_SMCR_ETF                                        
 954:Inc/stm32f3xx_ll_tim.h **** /**
 955:Inc/stm32f3xx_ll_tim.h ****   * @}
 956:Inc/stm32f3xx_ll_tim.h ****   */
 957:Inc/stm32f3xx_ll_tim.h **** 
 958:Inc/stm32f3xx_ll_tim.h **** 
 959:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_POLARITY break polarity
 960:Inc/stm32f3xx_ll_tim.h ****   * @{
 961:Inc/stm32f3xx_ll_tim.h ****   */
 962:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_LOW              0x00000000U               /*!< Break input BRK is ac
 963:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_HIGH             TIM_BDTR_BKP              /*!< Break input BRK is ac
 964:Inc/stm32f3xx_ll_tim.h **** /**
 965:Inc/stm32f3xx_ll_tim.h ****   * @}
 966:Inc/stm32f3xx_ll_tim.h ****   */
 967:Inc/stm32f3xx_ll_tim.h **** 
 968:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_BDTR_BKF)
 969:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_FILTER break filter
 970:Inc/stm32f3xx_ll_tim.h ****   * @{
 971:Inc/stm32f3xx_ll_tim.h ****   */
 972:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV1              0x00000000U   /*!< No filter, BRK acts asynchronousl
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 30


 973:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV1_N2           0x00010000U   /*!< fSAMPLING=fCK_INT, N=2 */
 974:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV1_N4           0x00020000U   /*!< fSAMPLING=fCK_INT, N=4 */
 975:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV1_N8           0x00030000U   /*!< fSAMPLING=fCK_INT, N=8 */
 976:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV2_N6           0x00040000U   /*!< fSAMPLING=fDTS/2, N=6 */
 977:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV2_N8           0x00050000U   /*!< fSAMPLING=fDTS/2, N=8 */
 978:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV4_N6           0x00060000U   /*!< fSAMPLING=fDTS/4, N=6 */
 979:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV4_N8           0x00070000U   /*!< fSAMPLING=fDTS/4, N=8 */
 980:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV8_N6           0x00080000U   /*!< fSAMPLING=fDTS/8, N=6 */
 981:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV8_N8           0x00090000U   /*!< fSAMPLING=fDTS/8, N=8 */
 982:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV16_N5          0x000A0000U   /*!< fSAMPLING=fDTS/16, N=5 */
 983:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV16_N6          0x000B0000U   /*!< fSAMPLING=fDTS/16, N=6 */
 984:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV16_N8          0x000C0000U   /*!< fSAMPLING=fDTS/16, N=8 */
 985:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV32_N5          0x000D0000U   /*!< fSAMPLING=fDTS/32, N=5 */
 986:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV32_N6          0x000E0000U   /*!< fSAMPLING=fDTS/32, N=6 */
 987:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK_FILTER_FDIV32_N8          0x000F0000U   /*!< fSAMPLING=fDTS/32, N=8 */
 988:Inc/stm32f3xx_ll_tim.h **** /**
 989:Inc/stm32f3xx_ll_tim.h ****   * @}
 990:Inc/stm32f3xx_ll_tim.h ****   */
 991:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_BDTR_BKF */
 992:Inc/stm32f3xx_ll_tim.h **** 
 993:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_BDTR_BK2P)
 994:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK2_POLARITY BREAK2 POLARITY
 995:Inc/stm32f3xx_ll_tim.h ****   * @{
 996:Inc/stm32f3xx_ll_tim.h ****   */
 997:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_POLARITY_LOW             0x00000000U             /*!< Break input BRK2 is act
 998:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_POLARITY_HIGH            TIM_BDTR_BK2P           /*!< Break input BRK2 is act
 999:Inc/stm32f3xx_ll_tim.h **** /**
1000:Inc/stm32f3xx_ll_tim.h ****   * @}
1001:Inc/stm32f3xx_ll_tim.h ****   */
1002:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_BDTR_BK2P */
1003:Inc/stm32f3xx_ll_tim.h **** 
1004:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_BDTR_BK2F)
1005:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK2_FILTER BREAK2 FILTER
1006:Inc/stm32f3xx_ll_tim.h ****   * @{
1007:Inc/stm32f3xx_ll_tim.h ****   */
1008:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV1             0x00000000U   /*!< No filter, BRK acts asynchronousl
1009:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV1_N2          0x00100000U   /*!< fSAMPLING=fCK_INT, N=2 */
1010:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV1_N4          0x00200000U   /*!< fSAMPLING=fCK_INT, N=4 */
1011:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV1_N8          0x00300000U   /*!< fSAMPLING=fCK_INT, N=8 */
1012:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV2_N6          0x00400000U   /*!< fSAMPLING=fDTS/2, N=6 */
1013:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV2_N8          0x00500000U   /*!< fSAMPLING=fDTS/2, N=8 */
1014:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV4_N6          0x00600000U   /*!< fSAMPLING=fDTS/4, N=6 */
1015:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV4_N8          0x00700000U   /*!< fSAMPLING=fDTS/4, N=8 */
1016:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV8_N6          0x00800000U   /*!< fSAMPLING=fDTS/8, N=6 */
1017:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV8_N8          0x00900000U   /*!< fSAMPLING=fDTS/8, N=8 */
1018:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV16_N5         0x00A00000U   /*!< fSAMPLING=fDTS/16, N=5 */
1019:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV16_N6         0x00B00000U   /*!< fSAMPLING=fDTS/16, N=6 */
1020:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV16_N8         0x00C00000U   /*!< fSAMPLING=fDTS/16, N=8 */
1021:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV32_N5         0x00D00000U   /*!< fSAMPLING=fDTS/32, N=5 */
1022:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV32_N6         0x00E00000U   /*!< fSAMPLING=fDTS/32, N=6 */
1023:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_BREAK2_FILTER_FDIV32_N8         0x00F00000U   /*!< fSAMPLING=fDTS/32, N=8 */
1024:Inc/stm32f3xx_ll_tim.h **** /**
1025:Inc/stm32f3xx_ll_tim.h ****   * @}
1026:Inc/stm32f3xx_ll_tim.h ****   */
1027:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_BDTR_BK2F */
1028:Inc/stm32f3xx_ll_tim.h **** 
1029:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSI OSSI
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 31


1030:Inc/stm32f3xx_ll_tim.h ****   * @{
1031:Inc/stm32f3xx_ll_tim.h ****   */
1032:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OSSI_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
1033:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OSSI_ENABLE                     TIM_BDTR_OSSI           /*!< When inactive, OxC/OCxN
1034:Inc/stm32f3xx_ll_tim.h **** /**
1035:Inc/stm32f3xx_ll_tim.h ****   * @}
1036:Inc/stm32f3xx_ll_tim.h ****   */
1037:Inc/stm32f3xx_ll_tim.h **** 
1038:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSR OSSR
1039:Inc/stm32f3xx_ll_tim.h ****   * @{
1040:Inc/stm32f3xx_ll_tim.h ****   */
1041:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OSSR_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
1042:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OSSR_ENABLE                     TIM_BDTR_OSSR           /*!< When inactive, OC/OCN o
1043:Inc/stm32f3xx_ll_tim.h **** /**
1044:Inc/stm32f3xx_ll_tim.h ****   * @}
1045:Inc/stm32f3xx_ll_tim.h ****   */
1046:Inc/stm32f3xx_ll_tim.h **** 
1047:Inc/stm32f3xx_ll_tim.h **** 
1048:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_BASEADDR DMA Burst Base Address
1049:Inc/stm32f3xx_ll_tim.h ****   * @{
1050:Inc/stm32f3xx_ll_tim.h ****   */
1051:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR1           0x00000000U                                         
1052:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR2           TIM_DCR_DBA_0                                       
1053:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SMCR          TIM_DCR_DBA_1                                       
1054:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_DIER          (TIM_DCR_DBA_1 |  TIM_DCR_DBA_0)                    
1055:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SR            TIM_DCR_DBA_2                                       
1056:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_EGR           (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)                     
1057:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR1         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)                     
1058:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR2         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
1059:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCER          TIM_DCR_DBA_3                                       
1060:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CNT           (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)                     
1061:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_PSC           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)                     
1062:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_ARR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
1063:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_RCR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_2)                     
1064:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR1          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
1065:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR2          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)     
1066:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR3          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM
1067:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR4          TIM_DCR_DBA_4                                       
1068:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_BDTR          (TIM_DCR_DBA_4 | TIM_DCR_DBA_0)                     
1069:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR3         (TIM_DCR_DBA_4 | TIM_DCR_DBA_1)                     
1070:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CCR6_CCR6)
1071:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR5          (TIM_DCR_DBA_4 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
1072:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR6          (TIM_DCR_DBA_4 | TIM_DCR_DBA_2)                     
1073:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_CCR6_CCR6 */
1074:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_OR            (TIM_DCR_DBA_4 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
1075:Inc/stm32f3xx_ll_tim.h **** /**
1076:Inc/stm32f3xx_ll_tim.h ****   * @}
1077:Inc/stm32f3xx_ll_tim.h ****   */
1078:Inc/stm32f3xx_ll_tim.h **** 
1079:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_LENGTH DMA Burst Length
1080:Inc/stm32f3xx_ll_tim.h ****   * @{
1081:Inc/stm32f3xx_ll_tim.h ****   */
1082:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_1TRANSFER       0x00000000U                                         
1083:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_2TRANSFERS      TIM_DCR_DBL_0                                       
1084:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_3TRANSFERS      TIM_DCR_DBL_1                                       
1085:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_4TRANSFERS      (TIM_DCR_DBL_1 |  TIM_DCR_DBL_0)                    
1086:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_5TRANSFERS      TIM_DCR_DBL_2                                       
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 32


1087:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_6TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)                     
1088:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_7TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)                     
1089:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_8TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
1090:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_9TRANSFERS      TIM_DCR_DBL_3                                       
1091:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_10TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)                     
1092:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_11TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)                     
1093:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_12TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
1094:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_13TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)                     
1095:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_14TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)     
1096:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_15TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)     
1097:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_16TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM
1098:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_17TRANSFERS     TIM_DCR_DBL_4                                       
1099:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_18TRANSFERS     (TIM_DCR_DBL_4 |  TIM_DCR_DBL_0)                    
1100:Inc/stm32f3xx_ll_tim.h **** /**
1101:Inc/stm32f3xx_ll_tim.h ****   * @}
1102:Inc/stm32f3xx_ll_tim.h ****   */
1103:Inc/stm32f3xx_ll_tim.h **** 
1104:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM1)
1105:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM1_ETR_ADC1_RMP  TIM1 External Trigger ADC1 Remap
1106:Inc/stm32f3xx_ll_tim.h ****   * @{
1107:Inc/stm32f3xx_ll_tim.h ****   */
1108:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC1_RMP_NC   TIM1_OR_RMP_MASK                                            /
1109:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC1_RMP_AWD1 (TIM1_OR_ETR_RMP_0 | TIM1_OR_RMP_MASK)                      /
1110:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC1_RMP_AWD2 (TIM1_OR_ETR_RMP_1 | TIM1_OR_RMP_MASK)                      /
1111:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC1_RMP_AWD3 (TIM1_OR_ETR_RMP_0 | TIM1_OR_ETR_RMP_1| TIM1_OR_RMP_MASK)   /
1112:Inc/stm32f3xx_ll_tim.h **** /**
1113:Inc/stm32f3xx_ll_tim.h ****   * @}
1114:Inc/stm32f3xx_ll_tim.h ****   */
1115:Inc/stm32f3xx_ll_tim.h **** #if defined(ADC4)
1116:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM1_ETR_ADC4_RMP  TIM1 External Trigger ADC4 Remap
1117:Inc/stm32f3xx_ll_tim.h ****   * @{
1118:Inc/stm32f3xx_ll_tim.h ****   */
1119:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC4_RMP_NC   TIM1_OR_RMP_MASK                                             
1120:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC4_RMP_AWD1 (TIM1_OR_ETR_RMP_2 | TIM1_OR_RMP_MASK)                       
1121:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC4_RMP_AWD2 (TIM1_OR_ETR_RMP_3 | TIM1_OR_RMP_MASK)                       
1122:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC4_RMP_AWD3 (TIM1_OR_ETR_RMP_3 | TIM1_OR_ETR_RMP_2 | TIM1_OR_RMP_MASK)   
1123:Inc/stm32f3xx_ll_tim.h **** /**
1124:Inc/stm32f3xx_ll_tim.h ****   * @}
1125:Inc/stm32f3xx_ll_tim.h ****   */
1126:Inc/stm32f3xx_ll_tim.h **** #else
1127:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM1_ETR_ADC2_RMP  TIM1 External Trigger ADC3 Remap
1128:Inc/stm32f3xx_ll_tim.h ****   * @{
1129:Inc/stm32f3xx_ll_tim.h ****   */
1130:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC2_RMP_NC   TIM1_OR_RMP_MASK                                             
1131:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC2_RMP_AWD1 (TIM1_OR_ETR_RMP_2 | TIM1_OR_RMP_MASK)                       
1132:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC2_RMP_AWD2 (TIM1_OR_ETR_RMP_3 | TIM1_OR_RMP_MASK)                       
1133:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM1_ETR_ADC2_RMP_AWD3 (TIM1_OR_ETR_RMP_3 | TIM1_OR_ETR_RMP_2 | TIM1_OR_RMP_MASK)   
1134:Inc/stm32f3xx_ll_tim.h **** /**
1135:Inc/stm32f3xx_ll_tim.h ****   * @}
1136:Inc/stm32f3xx_ll_tim.h ****   */
1137:Inc/stm32f3xx_ll_tim.h **** #endif /* ADC4 */
1138:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM1 */
1139:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM8)
1140:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM8_ETR_ADC2_RMP  TIM8 External Trigger ADC2 Remap
1141:Inc/stm32f3xx_ll_tim.h ****   * @{
1142:Inc/stm32f3xx_ll_tim.h ****   */
1143:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC2_RMP_NC   TIM8_OR_RMP_MASK                                             
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 33


1144:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC2_RMP_AWD1 (TIM8_OR_ETR_RMP_0 | TIM8_OR_RMP_MASK)                       
1145:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC2_RMP_AWD2 (TIM8_OR_ETR_RMP_1 | TIM8_OR_RMP_MASK)                       
1146:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC2_RMP_AWD3 (TIM8_OR_ETR_RMP_0 | TIM8_OR_ETR_RMP_1 | TIM8_OR_RMP_MASK)   
1147:Inc/stm32f3xx_ll_tim.h **** /**
1148:Inc/stm32f3xx_ll_tim.h ****   * @}
1149:Inc/stm32f3xx_ll_tim.h ****   */
1150:Inc/stm32f3xx_ll_tim.h **** 
1151:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM8_ETR_ADC3_RMP  TIM8 External Trigger ADC3 Remap
1152:Inc/stm32f3xx_ll_tim.h ****   * @{
1153:Inc/stm32f3xx_ll_tim.h ****   */
1154:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC3_RMP_NC   TIM8_OR_RMP_MASK                                             
1155:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC3_RMP_AWD1 (TIM8_OR_ETR_RMP_2 | TIM8_OR_RMP_MASK)                       
1156:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC3_RMP_AWD2 (TIM8_OR_ETR_RMP_3 | TIM8_OR_RMP_MASK)                       
1157:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM8_ETR_ADC3_RMP_AWD3 (TIM8_OR_ETR_RMP_2 | TIM8_OR_ETR_RMP_3 | TIM8_OR_RMP_MASK)   
1158:Inc/stm32f3xx_ll_tim.h **** /**
1159:Inc/stm32f3xx_ll_tim.h ****   * @}
1160:Inc/stm32f3xx_ll_tim.h ****   */
1161:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM8 */
1162:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM16)
1163:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM16_TI1_RMP  TIM16 External Input Ch1 Remap
1164:Inc/stm32f3xx_ll_tim.h ****   * @{
1165:Inc/stm32f3xx_ll_tim.h ****   */
1166:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM16_TI1_RMP_GPIO    0x00000000U                                                   
1167:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM16_TI1_RMP_RTC     (TIM16_OR_TI1_RMP_0 | TIM16_OR_RMP_MASK)                      
1168:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM16_TI1_RMP_HSE_32  (TIM16_OR_TI1_RMP_1 | TIM16_OR_RMP_MASK)                      
1169:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM16_TI1_RMP_MCO     (TIM16_OR_TI1_RMP_1 | TIM16_OR_TI1_RMP_0 | TIM16_OR_RMP_MASK) 
1170:Inc/stm32f3xx_ll_tim.h **** /**
1171:Inc/stm32f3xx_ll_tim.h ****   * @}
1172:Inc/stm32f3xx_ll_tim.h ****   */
1173:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM16 */
1174:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM20)
1175:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM20_ETR_ADC3_RMP  TIM20 External Trigger ADC3 Remap
1176:Inc/stm32f3xx_ll_tim.h ****   * @{
1177:Inc/stm32f3xx_ll_tim.h ****   */
1178:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC3_RMP_NC   TIM20_OR_RMP_MASK                                           
1179:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC3_RMP_AWD1 (TIM20_OR_ETR_RMP_0 | TIM20_OR_RMP_MASK)                    
1180:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC3_RMP_AWD2 (TIM20_OR_ETR_RMP_1 | TIM20_OR_RMP_MASK)                    
1181:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC3_RMP_AWD3 (TIM20_OR_ETR_RMP_0 | TIM20_OR_ETR_RMP_1 | TIM20_OR_RMP_MASK
1182:Inc/stm32f3xx_ll_tim.h **** /**
1183:Inc/stm32f3xx_ll_tim.h ****   * @}
1184:Inc/stm32f3xx_ll_tim.h ****   */
1185:Inc/stm32f3xx_ll_tim.h **** 
1186:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM20_ETR_ADC4_RMP  TIM20 External Trigger ADC4 Remap
1187:Inc/stm32f3xx_ll_tim.h ****   * @{
1188:Inc/stm32f3xx_ll_tim.h ****   */
1189:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC4_RMP_NC   TIM20_OR_RMP_MASK                                           
1190:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC4_RMP_AWD1 (TIM20_OR_ETR_RMP_2 | TIM20_OR_RMP_MASK)                    
1191:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC4_RMP_AWD2 (TIM20_OR_ETR_RMP_3 | TIM20_OR_RMP_MASK)                    
1192:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM20_ETR_ADC4_RMP_AWD3 (TIM20_OR_ETR_RMP_2 | TIM20_OR_ETR_RMP_3 | TIM20_OR_RMP_MASK
1193:Inc/stm32f3xx_ll_tim.h **** /**
1194:Inc/stm32f3xx_ll_tim.h ****   * @}
1195:Inc/stm32f3xx_ll_tim.h ****   */
1196:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM20 */
1197:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM14)
1198:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TIM14_TI1_RMP  TIM14 Timer Input1 Remap
1199:Inc/stm32f3xx_ll_tim.h ****   * @{
1200:Inc/stm32f3xx_ll_tim.h ****   */
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 34


1201:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_GPIO    TIM14_OR_RMP_MASK                                             
1202:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_RTC_CLK (TIM14_OR_TI1_RMP_0 | TIM14_OR_RMP_MASK)                      
1203:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_HSE     (TIM14_OR_TI1_RMP_1 | TIM14_OR_RMP_MASK)                      
1204:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_MCO     (TIM14_OR_TI1_RMP_0 | TIM14_OR_TI1_RMP_1 | TIM14_OR_RMP_MASK) 
1205:Inc/stm32f3xx_ll_tim.h **** /**
1206:Inc/stm32f3xx_ll_tim.h ****   * @}
1207:Inc/stm32f3xx_ll_tim.h ****   */
1208:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM14 */
1209:Inc/stm32f3xx_ll_tim.h **** 
1210:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_SMCR_OCCS)
1211:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCREF_CLR_INT OCREF clear input selection
1212:Inc/stm32f3xx_ll_tim.h ****   * @{
1213:Inc/stm32f3xx_ll_tim.h ****   */
1214:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_OCREF_CLR     0x00000000U         /*!< OCREF_CLR_INT is connected to t
1215:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_ETR           TIM_SMCR_OCCS       /*!< OCREF_CLR_INT is connected to E
1216:Inc/stm32f3xx_ll_tim.h **** /**
1217:Inc/stm32f3xx_ll_tim.h ****   * @}
1218:Inc/stm32f3xx_ll_tim.h ****   */
1219:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_SMCR_OCCS*/
1220:Inc/stm32f3xx_ll_tim.h **** 
1221:Inc/stm32f3xx_ll_tim.h **** /**
1222:Inc/stm32f3xx_ll_tim.h ****   * @}
1223:Inc/stm32f3xx_ll_tim.h ****   */
1224:Inc/stm32f3xx_ll_tim.h **** 
1225:Inc/stm32f3xx_ll_tim.h **** /* Exported macro ------------------------------------------------------------*/
1226:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Macros TIM Exported Macros
1227:Inc/stm32f3xx_ll_tim.h ****   * @{
1228:Inc/stm32f3xx_ll_tim.h ****   */
1229:Inc/stm32f3xx_ll_tim.h **** 
1230:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EM_WRITE_READ Common Write and read registers Macros
1231:Inc/stm32f3xx_ll_tim.h ****   * @{
1232:Inc/stm32f3xx_ll_tim.h ****   */
1233:Inc/stm32f3xx_ll_tim.h **** /**
1234:Inc/stm32f3xx_ll_tim.h ****   * @brief  Write a value in TIM register.
1235:Inc/stm32f3xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
1236:Inc/stm32f3xx_ll_tim.h ****   * @param  __REG__ Register to be written
1237:Inc/stm32f3xx_ll_tim.h ****   * @param  __VALUE__ Value to be written in the register
1238:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1239:Inc/stm32f3xx_ll_tim.h ****   */
1240:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1241:Inc/stm32f3xx_ll_tim.h **** 
1242:Inc/stm32f3xx_ll_tim.h **** /**
1243:Inc/stm32f3xx_ll_tim.h ****   * @brief  Read a value in TIM register.
1244:Inc/stm32f3xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
1245:Inc/stm32f3xx_ll_tim.h ****   * @param  __REG__ Register to be read
1246:Inc/stm32f3xx_ll_tim.h ****   * @retval Register value
1247:Inc/stm32f3xx_ll_tim.h ****   */
1248:Inc/stm32f3xx_ll_tim.h **** #define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1249:Inc/stm32f3xx_ll_tim.h **** /**
1250:Inc/stm32f3xx_ll_tim.h ****   * @}
1251:Inc/stm32f3xx_ll_tim.h ****   */
1252:Inc/stm32f3xx_ll_tim.h **** 
1253:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EM_Exported_Macros Exported_Macros
1254:Inc/stm32f3xx_ll_tim.h ****   * @{
1255:Inc/stm32f3xx_ll_tim.h ****   */
1256:Inc/stm32f3xx_ll_tim.h **** /**
1257:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro retrieving the UIFCPY flag from the counter value.
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 35


1258:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GETFLAG_UIFCPY (@ref LL_TIM_GetCounter ());
1259:Inc/stm32f3xx_ll_tim.h ****   * @note  Relevant only if UIF flag remapping has been enabled  (UIF status bit is copied
1260:Inc/stm32f3xx_ll_tim.h ****   *        to TIMx_CNT register bit 31)
1261:Inc/stm32f3xx_ll_tim.h ****   * @param  __CNT__ Counter value
1262:Inc/stm32f3xx_ll_tim.h ****   * @retval UIF status bit
1263:Inc/stm32f3xx_ll_tim.h ****   */
1264:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_GETFLAG_UIFCPY(__CNT__)  \
1265:Inc/stm32f3xx_ll_tim.h ****    (READ_BIT((__CNT__), TIM_CNT_UIFCPY) >> TIM_CNT_UIFCPY_Pos)
1266:Inc/stm32f3xx_ll_tim.h **** 
1267:Inc/stm32f3xx_ll_tim.h **** /**
1268:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro calculating DTG[0:7] in the TIMx_BDTR register to achieve the requested de
1269:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DEADTIME (80000000, @ref LL_TIM_GetClockDivision (), 120);
1270:Inc/stm32f3xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1271:Inc/stm32f3xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
1272:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1273:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1274:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1275:Inc/stm32f3xx_ll_tim.h ****   * @param  __DT__ deadtime duration (in ns)
1276:Inc/stm32f3xx_ll_tim.h ****   * @retval DTG[0:7]
1277:Inc/stm32f3xx_ll_tim.h ****   */
1278:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_CALC_DEADTIME(__TIMCLK__, __CKD__, __DT__)  \
1279:Inc/stm32f3xx_ll_tim.h ****     ( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__))))   
1280:Inc/stm32f3xx_ll_tim.h ****       (((uint64_t)((__DT__)*1000U)) < (64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__
1281:Inc/stm32f3xx_ll_tim.h ****       (((uint64_t)((__DT__)*1000U)) < (32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__
1282:Inc/stm32f3xx_ll_tim.h ****       (((uint64_t)((__DT__)*1000U)) < (32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (_
1283:Inc/stm32f3xx_ll_tim.h ****        0U)
1284:Inc/stm32f3xx_ll_tim.h **** 
1285:Inc/stm32f3xx_ll_tim.h **** /**
1286:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro calculating the prescaler value to achieve the required counter clock freq
1287:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PSC (80000000, 1000000);
1288:Inc/stm32f3xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1289:Inc/stm32f3xx_ll_tim.h ****   * @param  __CNTCLK__ counter clock frequency (in Hz)
1290:Inc/stm32f3xx_ll_tim.h ****   * @retval Prescaler value  (between Min_Data=0 and Max_Data=65535)
1291:Inc/stm32f3xx_ll_tim.h ****   */
1292:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
1293:Inc/stm32f3xx_ll_tim.h ****    ((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)((__TIMCLK__)/(__CNTCLK__) - 1U) : 0U
1294:Inc/stm32f3xx_ll_tim.h **** 
1295:Inc/stm32f3xx_ll_tim.h **** /**
1296:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required output signal fr
1297:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_ARR (1000000, @ref LL_TIM_GetPrescaler (), 10000);
1298:Inc/stm32f3xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1299:Inc/stm32f3xx_ll_tim.h ****   * @param  __PSC__ prescaler
1300:Inc/stm32f3xx_ll_tim.h ****   * @param  __FREQ__ output signal frequency (in Hz)
1301:Inc/stm32f3xx_ll_tim.h ****   * @retval  Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1302:Inc/stm32f3xx_ll_tim.h ****   */
1303:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
1304:Inc/stm32f3xx_ll_tim.h ****      (((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? ((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U)
1305:Inc/stm32f3xx_ll_tim.h **** 
1306:Inc/stm32f3xx_ll_tim.h **** /**
1307:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro calculating the compare value required to achieve the required timer outpu
1308:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DELAY (1000000, @ref LL_TIM_GetPrescaler (), 10);
1309:Inc/stm32f3xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1310:Inc/stm32f3xx_ll_tim.h ****   * @param  __PSC__ prescaler
1311:Inc/stm32f3xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1312:Inc/stm32f3xx_ll_tim.h ****   * @retval Compare value  (between Min_Data=0 and Max_Data=65535)
1313:Inc/stm32f3xx_ll_tim.h ****   */
1314:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 36


1315:Inc/stm32f3xx_ll_tim.h **** ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
1316:Inc/stm32f3xx_ll_tim.h ****           / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
1317:Inc/stm32f3xx_ll_tim.h **** 
1318:Inc/stm32f3xx_ll_tim.h **** /**
1319:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required pulse duration (
1320:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PULSE (1000000, @ref LL_TIM_GetPrescaler (), 10, 20);
1321:Inc/stm32f3xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1322:Inc/stm32f3xx_ll_tim.h ****   * @param  __PSC__ prescaler
1323:Inc/stm32f3xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1324:Inc/stm32f3xx_ll_tim.h ****   * @param  __PULSE__ pulse duration (in us)
1325:Inc/stm32f3xx_ll_tim.h ****   * @retval Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1326:Inc/stm32f3xx_ll_tim.h ****   */
1327:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
1328:Inc/stm32f3xx_ll_tim.h ****  ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
1329:Inc/stm32f3xx_ll_tim.h ****            + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
1330:Inc/stm32f3xx_ll_tim.h **** 
1331:Inc/stm32f3xx_ll_tim.h **** /**
1332:Inc/stm32f3xx_ll_tim.h ****   * @brief  HELPER macro retrieving the ratio of the input capture prescaler
1333:Inc/stm32f3xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GET_ICPSC_RATIO (@ref LL_TIM_IC_GetPrescaler ());
1334:Inc/stm32f3xx_ll_tim.h ****   * @param  __ICPSC__ This parameter can be one of the following values:
1335:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
1336:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
1337:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
1338:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
1339:Inc/stm32f3xx_ll_tim.h ****   * @retval Input capture prescaler ratio (1, 2, 4 or 8)
1340:Inc/stm32f3xx_ll_tim.h ****   */
1341:Inc/stm32f3xx_ll_tim.h **** #define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
1342:Inc/stm32f3xx_ll_tim.h ****    ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
1343:Inc/stm32f3xx_ll_tim.h **** 
1344:Inc/stm32f3xx_ll_tim.h **** 
1345:Inc/stm32f3xx_ll_tim.h **** /**
1346:Inc/stm32f3xx_ll_tim.h ****   * @}
1347:Inc/stm32f3xx_ll_tim.h ****   */
1348:Inc/stm32f3xx_ll_tim.h **** 
1349:Inc/stm32f3xx_ll_tim.h **** 
1350:Inc/stm32f3xx_ll_tim.h **** /**
1351:Inc/stm32f3xx_ll_tim.h ****   * @}
1352:Inc/stm32f3xx_ll_tim.h ****   */
1353:Inc/stm32f3xx_ll_tim.h **** 
1354:Inc/stm32f3xx_ll_tim.h **** /* Exported functions --------------------------------------------------------*/
1355:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Functions TIM Exported Functions
1356:Inc/stm32f3xx_ll_tim.h ****   * @{
1357:Inc/stm32f3xx_ll_tim.h ****   */
1358:Inc/stm32f3xx_ll_tim.h **** 
1359:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Time_Base Time Base configuration
1360:Inc/stm32f3xx_ll_tim.h ****   * @{
1361:Inc/stm32f3xx_ll_tim.h ****   */
1362:Inc/stm32f3xx_ll_tim.h **** /**
1363:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable timer counter.
1364:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_EnableCounter
1365:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1366:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1367:Inc/stm32f3xx_ll_tim.h ****   */
1368:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
1369:Inc/stm32f3xx_ll_tim.h **** {
1370:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_CEN);
1371:Inc/stm32f3xx_ll_tim.h **** }
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 37


1372:Inc/stm32f3xx_ll_tim.h **** 
1373:Inc/stm32f3xx_ll_tim.h **** /**
1374:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable timer counter.
1375:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_DisableCounter
1376:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1377:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1378:Inc/stm32f3xx_ll_tim.h ****   */
1379:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
1380:Inc/stm32f3xx_ll_tim.h **** {
1381:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
1382:Inc/stm32f3xx_ll_tim.h **** }
1383:Inc/stm32f3xx_ll_tim.h **** 
1384:Inc/stm32f3xx_ll_tim.h **** /**
1385:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicates whether the timer counter is enabled.
1386:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
1387:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1388:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1389:Inc/stm32f3xx_ll_tim.h ****   */
1390:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
1391:Inc/stm32f3xx_ll_tim.h **** {
1392:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN));
1393:Inc/stm32f3xx_ll_tim.h **** }
1394:Inc/stm32f3xx_ll_tim.h **** 
1395:Inc/stm32f3xx_ll_tim.h **** /**
1396:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable update event generation.
1397:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
1398:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1399:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1400:Inc/stm32f3xx_ll_tim.h ****   */
1401:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
1402:Inc/stm32f3xx_ll_tim.h **** {
1403:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
1404:Inc/stm32f3xx_ll_tim.h **** }
1405:Inc/stm32f3xx_ll_tim.h **** 
1406:Inc/stm32f3xx_ll_tim.h **** /**
1407:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable update event generation.
1408:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
1409:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1410:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1411:Inc/stm32f3xx_ll_tim.h ****   */
1412:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
1413:Inc/stm32f3xx_ll_tim.h **** {
1414:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
1415:Inc/stm32f3xx_ll_tim.h **** }
1416:Inc/stm32f3xx_ll_tim.h **** 
1417:Inc/stm32f3xx_ll_tim.h **** /**
1418:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicates whether update event generation is enabled.
1419:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
1420:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1421:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1422:Inc/stm32f3xx_ll_tim.h ****   */
1423:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
1424:Inc/stm32f3xx_ll_tim.h **** {
1425:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (TIM_CR1_UDIS));
1426:Inc/stm32f3xx_ll_tim.h **** }
1427:Inc/stm32f3xx_ll_tim.h **** 
1428:Inc/stm32f3xx_ll_tim.h **** /**
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 38


1429:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set update event source
1430:Inc/stm32f3xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
1431:Inc/stm32f3xx_ll_tim.h ****   *       generate an update interrupt or DMA request if enabled:
1432:Inc/stm32f3xx_ll_tim.h ****   *        - Counter overflow/underflow
1433:Inc/stm32f3xx_ll_tim.h ****   *        - Setting the UG bit
1434:Inc/stm32f3xx_ll_tim.h ****   *        - Update generation through the slave mode controller
1435:Inc/stm32f3xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
1436:Inc/stm32f3xx_ll_tim.h ****   *       overflow/underflow generates an update interrupt or DMA request if enabled.
1437:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
1438:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1439:Inc/stm32f3xx_ll_tim.h ****   * @param  UpdateSource This parameter can be one of the following values:
1440:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1441:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1442:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1443:Inc/stm32f3xx_ll_tim.h ****   */
1444:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
1445:Inc/stm32f3xx_ll_tim.h **** {
1446:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
1447:Inc/stm32f3xx_ll_tim.h **** }
1448:Inc/stm32f3xx_ll_tim.h **** 
1449:Inc/stm32f3xx_ll_tim.h **** /**
1450:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get actual event update source
1451:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
1452:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1453:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1454:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1455:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1456:Inc/stm32f3xx_ll_tim.h ****   */
1457:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
1458:Inc/stm32f3xx_ll_tim.h **** {
1459:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
1460:Inc/stm32f3xx_ll_tim.h **** }
1461:Inc/stm32f3xx_ll_tim.h **** 
1462:Inc/stm32f3xx_ll_tim.h **** /**
1463:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set one pulse mode (one shot v.s. repetitive).
1464:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
1465:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1466:Inc/stm32f3xx_ll_tim.h ****   * @param  OnePulseMode This parameter can be one of the following values:
1467:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1468:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1469:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1470:Inc/stm32f3xx_ll_tim.h ****   */
1471:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
1472:Inc/stm32f3xx_ll_tim.h **** {
1473:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
1474:Inc/stm32f3xx_ll_tim.h **** }
1475:Inc/stm32f3xx_ll_tim.h **** 
1476:Inc/stm32f3xx_ll_tim.h **** /**
1477:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get actual one pulse mode.
1478:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
1479:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1480:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1481:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1482:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1483:Inc/stm32f3xx_ll_tim.h ****   */
1484:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
1485:Inc/stm32f3xx_ll_tim.h **** {
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 39


1486:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
1487:Inc/stm32f3xx_ll_tim.h **** }
1488:Inc/stm32f3xx_ll_tim.h **** 
1489:Inc/stm32f3xx_ll_tim.h **** /**
1490:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the timer counter counting mode.
1491:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1492:Inc/stm32f3xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1493:Inc/stm32f3xx_ll_tim.h ****   *       by a timer instance.
1494:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
1495:Inc/stm32f3xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_SetCounterMode
1496:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1497:Inc/stm32f3xx_ll_tim.h ****   * @param  CounterMode This parameter can be one of the following values:
1498:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1499:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1500:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1501:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1502:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1503:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1504:Inc/stm32f3xx_ll_tim.h ****   */
1505:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
1506:Inc/stm32f3xx_ll_tim.h **** {
1507:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS, CounterMode);
1508:Inc/stm32f3xx_ll_tim.h **** }
1509:Inc/stm32f3xx_ll_tim.h **** 
1510:Inc/stm32f3xx_ll_tim.h **** /**
1511:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get actual counter mode.
1512:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1513:Inc/stm32f3xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1514:Inc/stm32f3xx_ll_tim.h ****   *       by a timer instance.
1515:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
1516:Inc/stm32f3xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_GetCounterMode
1517:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1518:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1519:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1520:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1521:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1522:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1523:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1524:Inc/stm32f3xx_ll_tim.h ****   */
1525:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
1526:Inc/stm32f3xx_ll_tim.h **** {
1527:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
1528:Inc/stm32f3xx_ll_tim.h **** }
1529:Inc/stm32f3xx_ll_tim.h **** 
1530:Inc/stm32f3xx_ll_tim.h **** /**
1531:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable auto-reload (ARR) preload.
1532:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
1533:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1534:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1535:Inc/stm32f3xx_ll_tim.h ****   */
1536:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
1537:Inc/stm32f3xx_ll_tim.h **** {
1538:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
1539:Inc/stm32f3xx_ll_tim.h **** }
1540:Inc/stm32f3xx_ll_tim.h **** 
1541:Inc/stm32f3xx_ll_tim.h **** /**
1542:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable auto-reload (ARR) preload.
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 40


1543:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
1544:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1545:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1546:Inc/stm32f3xx_ll_tim.h ****   */
1547:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
1548:Inc/stm32f3xx_ll_tim.h **** {
1549:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
1550:Inc/stm32f3xx_ll_tim.h **** }
1551:Inc/stm32f3xx_ll_tim.h **** 
1552:Inc/stm32f3xx_ll_tim.h **** /**
1553:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicates whether auto-reload (ARR) preload is enabled.
1554:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
1555:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1556:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1557:Inc/stm32f3xx_ll_tim.h ****   */
1558:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
1559:Inc/stm32f3xx_ll_tim.h **** {
1560:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE));
1561:Inc/stm32f3xx_ll_tim.h **** }
1562:Inc/stm32f3xx_ll_tim.h **** 
1563:Inc/stm32f3xx_ll_tim.h **** /**
1564:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead
1565:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1566:Inc/stm32f3xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1567:Inc/stm32f3xx_ll_tim.h ****   *       instance.
1568:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
1569:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1570:Inc/stm32f3xx_ll_tim.h ****   * @param  ClockDivision This parameter can be one of the following values:
1571:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1572:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1573:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1574:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1575:Inc/stm32f3xx_ll_tim.h ****   */
1576:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
1577:Inc/stm32f3xx_ll_tim.h **** {
1578:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
1579:Inc/stm32f3xx_ll_tim.h **** }
1580:Inc/stm32f3xx_ll_tim.h **** 
1581:Inc/stm32f3xx_ll_tim.h **** /**
1582:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by t
1583:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1584:Inc/stm32f3xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1585:Inc/stm32f3xx_ll_tim.h ****   *       instance.
1586:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
1587:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1588:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1589:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1590:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1591:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1592:Inc/stm32f3xx_ll_tim.h ****   */
1593:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
1594:Inc/stm32f3xx_ll_tim.h **** {
1595:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
1596:Inc/stm32f3xx_ll_tim.h **** }
1597:Inc/stm32f3xx_ll_tim.h **** 
1598:Inc/stm32f3xx_ll_tim.h **** /**
1599:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the counter value.
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 41


1600:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1601:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1602:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_SetCounter
1603:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1604:Inc/stm32f3xx_ll_tim.h ****   * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1605:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1606:Inc/stm32f3xx_ll_tim.h ****   */
1607:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
1608:Inc/stm32f3xx_ll_tim.h **** {
1609:Inc/stm32f3xx_ll_tim.h ****   WRITE_REG(TIMx->CNT, Counter);
1610:Inc/stm32f3xx_ll_tim.h **** }
1611:Inc/stm32f3xx_ll_tim.h **** 
1612:Inc/stm32f3xx_ll_tim.h **** /**
1613:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the counter value.
1614:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1615:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1616:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_GetCounter
1617:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1618:Inc/stm32f3xx_ll_tim.h ****   * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1619:Inc/stm32f3xx_ll_tim.h ****   */
1620:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
1621:Inc/stm32f3xx_ll_tim.h **** {
1622:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CNT));
1623:Inc/stm32f3xx_ll_tim.h **** }
1624:Inc/stm32f3xx_ll_tim.h **** 
1625:Inc/stm32f3xx_ll_tim.h **** /**
1626:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the current direction of the counter
1627:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetDirection
1628:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1629:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1630:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
1631:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
1632:Inc/stm32f3xx_ll_tim.h ****   */
1633:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
1634:Inc/stm32f3xx_ll_tim.h **** {
1635:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1636:Inc/stm32f3xx_ll_tim.h **** }
1637:Inc/stm32f3xx_ll_tim.h **** 
1638:Inc/stm32f3xx_ll_tim.h **** /**
1639:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the prescaler value.
1640:Inc/stm32f3xx_ll_tim.h ****   * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
1641:Inc/stm32f3xx_ll_tim.h ****   * @note The prescaler can be changed on the fly as this control register is buffered. The new
1642:Inc/stm32f3xx_ll_tim.h ****   *       prescaler ratio is taken into account at the next update event.
1643:Inc/stm32f3xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
1644:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
1645:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1646:Inc/stm32f3xx_ll_tim.h ****   * @param  Prescaler between Min_Data=0 and Max_Data=65535
1647:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1648:Inc/stm32f3xx_ll_tim.h ****   */
1649:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
1650:Inc/stm32f3xx_ll_tim.h **** {
1651:Inc/stm32f3xx_ll_tim.h ****   WRITE_REG(TIMx->PSC, Prescaler);
1652:Inc/stm32f3xx_ll_tim.h **** }
1653:Inc/stm32f3xx_ll_tim.h **** 
1654:Inc/stm32f3xx_ll_tim.h **** /**
1655:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the prescaler value.
1656:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 42


1657:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1658:Inc/stm32f3xx_ll_tim.h ****   * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
1659:Inc/stm32f3xx_ll_tim.h ****   */
1660:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
1661:Inc/stm32f3xx_ll_tim.h **** {
1662:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->PSC));
1663:Inc/stm32f3xx_ll_tim.h **** }
1664:Inc/stm32f3xx_ll_tim.h **** 
1665:Inc/stm32f3xx_ll_tim.h **** /**
1666:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the auto-reload value.
1667:Inc/stm32f3xx_ll_tim.h ****   * @note The counter is blocked while the auto-reload value is null.
1668:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1669:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1670:Inc/stm32f3xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
1671:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
1672:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1673:Inc/stm32f3xx_ll_tim.h ****   * @param  AutoReload between Min_Data=0 and Max_Data=65535
1674:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1675:Inc/stm32f3xx_ll_tim.h ****   */
1676:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
1677:Inc/stm32f3xx_ll_tim.h **** {
1678:Inc/stm32f3xx_ll_tim.h ****   WRITE_REG(TIMx->ARR, AutoReload);
1679:Inc/stm32f3xx_ll_tim.h **** }
1680:Inc/stm32f3xx_ll_tim.h **** 
1681:Inc/stm32f3xx_ll_tim.h **** /**
1682:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the auto-reload value.
1683:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
1684:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1685:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1686:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1687:Inc/stm32f3xx_ll_tim.h ****   * @retval Auto-reload value
1688:Inc/stm32f3xx_ll_tim.h ****   */
1689:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
1690:Inc/stm32f3xx_ll_tim.h **** {
1691:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->ARR));
1692:Inc/stm32f3xx_ll_tim.h **** }
1693:Inc/stm32f3xx_ll_tim.h **** 
1694:Inc/stm32f3xx_ll_tim.h **** /**
1695:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the repetition counter value.
1696:Inc/stm32f3xx_ll_tim.h ****   * @note For advanced timer instances RepetitionCounter can be up to 65535 except for STM32F373xC 
1697:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1698:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1699:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
1700:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1701:Inc/stm32f3xx_ll_tim.h ****   * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
1702:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1703:Inc/stm32f3xx_ll_tim.h ****   */
1704:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
1705:Inc/stm32f3xx_ll_tim.h **** {
1706:Inc/stm32f3xx_ll_tim.h ****   WRITE_REG(TIMx->RCR, RepetitionCounter);
1707:Inc/stm32f3xx_ll_tim.h **** }
1708:Inc/stm32f3xx_ll_tim.h **** 
1709:Inc/stm32f3xx_ll_tim.h **** /**
1710:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the repetition counter value.
1711:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1712:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1713:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 43


1714:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1715:Inc/stm32f3xx_ll_tim.h ****   * @retval Repetition counter value
1716:Inc/stm32f3xx_ll_tim.h ****   */
1717:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
1718:Inc/stm32f3xx_ll_tim.h **** {
1719:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->RCR));
1720:Inc/stm32f3xx_ll_tim.h **** }
1721:Inc/stm32f3xx_ll_tim.h **** 
1722:Inc/stm32f3xx_ll_tim.h **** #if defined(TIM_CR1_UIFREMAP)
1723:Inc/stm32f3xx_ll_tim.h **** /**
1724:Inc/stm32f3xx_ll_tim.h ****   * @brief  Force a continuous copy of the update interrupt flag (UIF) into the timer counter regis
1725:Inc/stm32f3xx_ll_tim.h ****   * @note This allows both the counter value and a potential roll-over condition signalled by the U
1726:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          UIFREMAP      LL_TIM_EnableUIFRemap
1727:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1728:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1729:Inc/stm32f3xx_ll_tim.h ****   */
1730:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUIFRemap(TIM_TypeDef *TIMx)
1731:Inc/stm32f3xx_ll_tim.h **** {
1732:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
1733:Inc/stm32f3xx_ll_tim.h **** }
1734:Inc/stm32f3xx_ll_tim.h **** 
1735:Inc/stm32f3xx_ll_tim.h **** /**
1736:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable update interrupt flag (UIF) remapping.
1737:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR1          UIFREMAP      LL_TIM_DisableUIFRemap
1738:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1739:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1740:Inc/stm32f3xx_ll_tim.h ****   */
1741:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUIFRemap(TIM_TypeDef *TIMx)
1742:Inc/stm32f3xx_ll_tim.h **** {
1743:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
1744:Inc/stm32f3xx_ll_tim.h **** }
1745:Inc/stm32f3xx_ll_tim.h **** 
1746:Inc/stm32f3xx_ll_tim.h **** #endif /* TIM_CR1_UIFREMAP */
1747:Inc/stm32f3xx_ll_tim.h **** /**
1748:Inc/stm32f3xx_ll_tim.h ****   * @}
1749:Inc/stm32f3xx_ll_tim.h ****   */
1750:Inc/stm32f3xx_ll_tim.h **** 
1751:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
1752:Inc/stm32f3xx_ll_tim.h ****   * @{
1753:Inc/stm32f3xx_ll_tim.h ****   */
1754:Inc/stm32f3xx_ll_tim.h **** /**
1755:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1756:Inc/stm32f3xx_ll_tim.h ****   * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
1757:Inc/stm32f3xx_ll_tim.h ****   *       they are updated only when a commutation event (COM) occurs.
1758:Inc/stm32f3xx_ll_tim.h ****   * @note Only on channels that have a complementary output.
1759:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1760:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1761:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
1762:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1763:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1764:Inc/stm32f3xx_ll_tim.h ****   */
1765:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
1766:Inc/stm32f3xx_ll_tim.h **** {
1767:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
1768:Inc/stm32f3xx_ll_tim.h **** }
1769:Inc/stm32f3xx_ll_tim.h **** 
1770:Inc/stm32f3xx_ll_tim.h **** /**
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 44


1771:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1772:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1773:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1774:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
1775:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1776:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1777:Inc/stm32f3xx_ll_tim.h ****   */
1778:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
1779:Inc/stm32f3xx_ll_tim.h **** {
1780:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
1781:Inc/stm32f3xx_ll_tim.h **** }
1782:Inc/stm32f3xx_ll_tim.h **** 
1783:Inc/stm32f3xx_ll_tim.h **** /**
1784:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
1785:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1786:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1787:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
1788:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1789:Inc/stm32f3xx_ll_tim.h ****   * @param  CCUpdateSource This parameter can be one of the following values:
1790:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
1791:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
1792:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1793:Inc/stm32f3xx_ll_tim.h ****   */
1794:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
1795:Inc/stm32f3xx_ll_tim.h **** {
1796:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
1797:Inc/stm32f3xx_ll_tim.h **** }
1798:Inc/stm32f3xx_ll_tim.h **** 
1799:Inc/stm32f3xx_ll_tim.h **** /**
1800:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the trigger of the capture/compare DMA request.
1801:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
1802:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1803:Inc/stm32f3xx_ll_tim.h ****   * @param  DMAReqTrigger This parameter can be one of the following values:
1804:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1805:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1806:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1807:Inc/stm32f3xx_ll_tim.h ****   */
1808:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
1809:Inc/stm32f3xx_ll_tim.h **** {
1810:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
1811:Inc/stm32f3xx_ll_tim.h **** }
1812:Inc/stm32f3xx_ll_tim.h **** 
1813:Inc/stm32f3xx_ll_tim.h **** /**
1814:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get actual trigger of the capture/compare DMA request.
1815:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
1816:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1817:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1818:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1819:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1820:Inc/stm32f3xx_ll_tim.h ****   */
1821:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
1822:Inc/stm32f3xx_ll_tim.h **** {
1823:Inc/stm32f3xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
1824:Inc/stm32f3xx_ll_tim.h **** }
1825:Inc/stm32f3xx_ll_tim.h **** 
1826:Inc/stm32f3xx_ll_tim.h **** /**
1827:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the lock level to freeze the
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 45


1828:Inc/stm32f3xx_ll_tim.h ****   *         configuration of several capture/compare parameters.
1829:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
1830:Inc/stm32f3xx_ll_tim.h ****   *       the lock mechanism is supported by a timer instance.
1831:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
1832:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1833:Inc/stm32f3xx_ll_tim.h ****   * @param  LockLevel This parameter can be one of the following values:
1834:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_OFF
1835:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_1
1836:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_2
1837:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_3
1838:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1839:Inc/stm32f3xx_ll_tim.h ****   */
1840:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
1841:Inc/stm32f3xx_ll_tim.h **** {
1842:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
1843:Inc/stm32f3xx_ll_tim.h **** }
1844:Inc/stm32f3xx_ll_tim.h **** 
1845:Inc/stm32f3xx_ll_tim.h **** /**
1846:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable capture/compare channels.
1847:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
1848:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
1849:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
1850:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
1851:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
1852:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
1853:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_EnableChannel\n
1854:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC5E          LL_TIM_CC_EnableChannel\n
1855:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC6E          LL_TIM_CC_EnableChannel
1856:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1857:Inc/stm32f3xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1858:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1859:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1860:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1861:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1862:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1863:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1864:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1865:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
1866:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
1867:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
1868:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1869:Inc/stm32f3xx_ll_tim.h ****   */
1870:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1871:Inc/stm32f3xx_ll_tim.h **** {
1872:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(TIMx->CCER, Channels);
1873:Inc/stm32f3xx_ll_tim.h **** }
1874:Inc/stm32f3xx_ll_tim.h **** 
1875:Inc/stm32f3xx_ll_tim.h **** /**
1876:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable capture/compare channels.
1877:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
1878:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
1879:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
1880:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
1881:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
1882:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
1883:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_DisableChannel\n
1884:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC5E          LL_TIM_CC_DisableChannel\n
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 46


1885:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC6E          LL_TIM_CC_DisableChannel
1886:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1887:Inc/stm32f3xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1888:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1889:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1890:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1891:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1892:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1893:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1894:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1895:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
1896:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
1897:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
1898:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1899:Inc/stm32f3xx_ll_tim.h ****   */
1900:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1901:Inc/stm32f3xx_ll_tim.h **** {
1902:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(TIMx->CCER, Channels);
1903:Inc/stm32f3xx_ll_tim.h **** }
1904:Inc/stm32f3xx_ll_tim.h **** 
1905:Inc/stm32f3xx_ll_tim.h **** /**
1906:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicate whether channel(s) is(are) enabled.
1907:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
1908:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
1909:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
1910:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
1911:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
1912:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
1913:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel\n
1914:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC5E          LL_TIM_CC_IsEnabledChannel\n
1915:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC6E          LL_TIM_CC_IsEnabledChannel
1916:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1917:Inc/stm32f3xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1918:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1919:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1920:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1921:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1922:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1923:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1924:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1925:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
1926:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
1927:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
1928:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1929:Inc/stm32f3xx_ll_tim.h ****   */
1930:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1931:Inc/stm32f3xx_ll_tim.h **** {
1932:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, Channels) == (Channels));
1933:Inc/stm32f3xx_ll_tim.h **** }
1934:Inc/stm32f3xx_ll_tim.h **** 
1935:Inc/stm32f3xx_ll_tim.h **** /**
1936:Inc/stm32f3xx_ll_tim.h ****   * @}
1937:Inc/stm32f3xx_ll_tim.h ****   */
1938:Inc/stm32f3xx_ll_tim.h **** 
1939:Inc/stm32f3xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
1940:Inc/stm32f3xx_ll_tim.h ****   * @{
1941:Inc/stm32f3xx_ll_tim.h ****   */
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 47


1942:Inc/stm32f3xx_ll_tim.h **** /**
1943:Inc/stm32f3xx_ll_tim.h ****   * @brief  Configure an output channel.
1944:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
1945:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
1946:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
1947:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
1948:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
1949:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        CC5S          LL_TIM_OC_ConfigOutput\n
1950:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        CC6S          LL_TIM_OC_ConfigOutput\n
1951:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
1952:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        CC5S          LL_TIM_OC_ConfigOutput\n
1953:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        CC6S          LL_TIM_OC_ConfigOutput\n
1954:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
1955:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        CC5S          LL_TIM_OC_ConfigOutput\n
1956:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        CC6S          LL_TIM_OC_ConfigOutput\n
1957:Inc/stm32f3xx_ll_tim.h ****   * @endif
1958:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
1959:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
1960:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
1961:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
1962:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC5P          LL_TIM_OC_ConfigOutput\n
1963:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC6P          LL_TIM_OC_ConfigOutput\n
1964:Inc/stm32f3xx_ll_tim.h ****   *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
1965:Inc/stm32f3xx_ll_tim.h ****   *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
1966:Inc/stm32f3xx_ll_tim.h ****   *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
1967:Inc/stm32f3xx_ll_tim.h ****   *         CR2          OIS4          LL_TIM_OC_ConfigOutput\n
1968:Inc/stm32f3xx_ll_tim.h ****   *         CR2          OIS5          LL_TIM_OC_ConfigOutput\n
1969:Inc/stm32f3xx_ll_tim.h ****   *         CR2          OIS6          LL_TIM_OC_ConfigOutput
1970:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
1971:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1972:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1973:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1974:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1975:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1976:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
1977:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
1978:Inc/stm32f3xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1979:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
1980:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
1981:Inc/stm32f3xx_ll_tim.h ****   * @note   CH3 CH4 CH5 and CH6 channels are not available for all F3 devices
1982:Inc/stm32f3xx_ll_tim.h ****   * @retval None
1983:Inc/stm32f3xx_ll_tim.h ****   */
1984:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configura
1985:Inc/stm32f3xx_ll_tim.h **** {
1986:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1987:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
1988:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
1989:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
1990:Inc/stm32f3xx_ll_tim.h ****              (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
1991:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
1992:Inc/stm32f3xx_ll_tim.h ****              (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
1993:Inc/stm32f3xx_ll_tim.h **** }
1994:Inc/stm32f3xx_ll_tim.h **** 
1995:Inc/stm32f3xx_ll_tim.h **** /**
1996:Inc/stm32f3xx_ll_tim.h ****   * @brief  Define the behavior of the output reference signal OCxREF from which
1997:Inc/stm32f3xx_ll_tim.h ****   *         OCx and OCxN (when relevant) are derived.
1998:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 48


1999:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
2000:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
2001:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_SetMode\n
2002:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2003:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5M          LL_TIM_OC_SetMode\n
2004:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6M          LL_TIM_OC_SetMode
2005:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2006:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5M          LL_TIM_OC_SetMode\n
2007:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6M          LL_TIM_OC_SetMode
2008:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2009:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5M          LL_TIM_OC_SetMode\n
2010:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6M          LL_TIM_OC_SetMode
2011:Inc/stm32f3xx_ll_tim.h ****   * @endif
2012:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2013:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2014:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2015:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2016:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2017:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2018:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2019:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2020:Inc/stm32f3xx_ll_tim.h ****   * @param  Mode This parameter can be one of the following values:
2021:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
2022:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
2023:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
2024:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
2025:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
2026:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
2027:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
2028:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
2029:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_RETRIG_OPM1
2030:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_RETRIG_OPM2
2031:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_COMBINED_PWM1
2032:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_COMBINED_PWM2
2033:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
2034:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
2035:Inc/stm32f3xx_ll_tim.h ****   * @note  The following OC modes are not available on all F3 devices :
2036:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_RETRIG_OPM1
2037:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_RETRIG_OPM2
2038:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_COMBINED_PWM1
2039:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_COMBINED_PWM2
2040:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_ASSYMETRIC_PWM1
2041:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_ASSYMETRIC_PWM2
2042:Inc/stm32f3xx_ll_tim.h ****   * @note  CH5 and CH6 channels are not available for all F3 devices
2043:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2044:Inc/stm32f3xx_ll_tim.h ****   */
2045:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
2046:Inc/stm32f3xx_ll_tim.h **** {
2047:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2048:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2049:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIF
2050:Inc/stm32f3xx_ll_tim.h **** }
2051:Inc/stm32f3xx_ll_tim.h **** 
2052:Inc/stm32f3xx_ll_tim.h **** /**
2053:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the output compare mode of an output channel.
2054:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
2055:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 49


2056:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
2057:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_GetMode\n
2058:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2059:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5M          LL_TIM_OC_GetMode\n
2060:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6M          LL_TIM_OC_GetMode
2061:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2062:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5M          LL_TIM_OC_GetMode\n
2063:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6M          LL_TIM_OC_GetMode
2064:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2065:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5M          LL_TIM_OC_GetMode\n
2066:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6M          LL_TIM_OC_GetMode
2067:Inc/stm32f3xx_ll_tim.h ****   * @endif
2068:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2069:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2070:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2071:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2072:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2073:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2074:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2075:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2076:Inc/stm32f3xx_ll_tim.h ****   * @note  The following OC modes are not available on all F3 devices :
2077:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_RETRIG_OPM1
2078:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_RETRIG_OPM2
2079:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_COMBINED_PWM1
2080:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_COMBINED_PWM2
2081:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_ASSYMETRIC_PWM1
2082:Inc/stm32f3xx_ll_tim.h ****   *        -  LL_TIM_OCMODE_ASSYMETRIC_PWM2
2083:Inc/stm32f3xx_ll_tim.h ****   * @note  CH5 and CH6 channels are not available for all F3 devices
2084:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2085:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
2086:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
2087:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
2088:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
2089:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
2090:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
2091:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
2092:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
2093:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_RETRIG_OPM1
2094:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_RETRIG_OPM2
2095:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_COMBINED_PWM1
2096:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_COMBINED_PWM2
2097:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
2098:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
2099:Inc/stm32f3xx_ll_tim.h ****   */
2100:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
2101:Inc/stm32f3xx_ll_tim.h **** {
2102:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2103:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2104:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIF
2105:Inc/stm32f3xx_ll_tim.h **** }
2106:Inc/stm32f3xx_ll_tim.h **** 
2107:Inc/stm32f3xx_ll_tim.h **** /**
2108:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the polarity of an output channel.
2109:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
2110:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
2111:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
2112:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 50


2113:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
2114:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
2115:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_SetPolarity\n
2116:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC5P          LL_TIM_OC_SetPolarity\n
2117:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC6P          LL_TIM_OC_SetPolarity
2118:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2119:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2120:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2121:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
2122:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2123:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
2124:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2125:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
2126:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2127:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2128:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2129:Inc/stm32f3xx_ll_tim.h ****   * @param  Polarity This parameter can be one of the following values:
2130:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
2131:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
2132:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2133:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2134:Inc/stm32f3xx_ll_tim.h ****   */
2135:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
2136:Inc/stm32f3xx_ll_tim.h **** {
2137:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2138:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[i
2139:Inc/stm32f3xx_ll_tim.h **** }
2140:Inc/stm32f3xx_ll_tim.h **** 
2141:Inc/stm32f3xx_ll_tim.h **** /**
2142:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the polarity of an output channel.
2143:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
2144:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
2145:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
2146:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
2147:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
2148:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
2149:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_GetPolarity\n
2150:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC5P          LL_TIM_OC_GetPolarity\n
2151:Inc/stm32f3xx_ll_tim.h ****   *         CCER         CC6P          LL_TIM_OC_GetPolarity
2152:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2153:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2154:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2155:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
2156:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2157:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
2158:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2159:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
2160:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2161:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2162:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2163:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2164:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2165:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
2166:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
2167:Inc/stm32f3xx_ll_tim.h ****   */
2168:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
2169:Inc/stm32f3xx_ll_tim.h **** {
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 51


2170:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2171:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChan
2172:Inc/stm32f3xx_ll_tim.h **** }
2173:Inc/stm32f3xx_ll_tim.h **** 
2174:Inc/stm32f3xx_ll_tim.h **** /**
2175:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the IDLE state of an output channel
2176:Inc/stm32f3xx_ll_tim.h ****   * @note This function is significant only for the timer instances
2177:Inc/stm32f3xx_ll_tim.h ****   *       supporting the break feature. Macro @ref IS_TIM_BREAK_INSTANCE(TIMx)
2178:Inc/stm32f3xx_ll_tim.h ****   *       can be used to check whether or not a timer instance provides
2179:Inc/stm32f3xx_ll_tim.h ****   *       a break input.
2180:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
2181:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
2182:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
2183:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
2184:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
2185:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
2186:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_SetIdleState\n
2187:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS5          LL_TIM_OC_SetIdleState\n
2188:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS6          LL_TIM_OC_SetIdleState
2189:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2190:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2191:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2192:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
2193:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2194:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
2195:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2196:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
2197:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2198:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2199:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2200:Inc/stm32f3xx_ll_tim.h ****   * @param  IdleState This parameter can be one of the following values:
2201:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
2202:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
2203:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2204:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2205:Inc/stm32f3xx_ll_tim.h ****   */
2206:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState
2207:Inc/stm32f3xx_ll_tim.h **** {
2208:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2209:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iC
2210:Inc/stm32f3xx_ll_tim.h **** }
2211:Inc/stm32f3xx_ll_tim.h **** 
2212:Inc/stm32f3xx_ll_tim.h **** /**
2213:Inc/stm32f3xx_ll_tim.h ****   * @brief  Get the IDLE state of an output channel
2214:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
2215:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
2216:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
2217:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
2218:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
2219:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
2220:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_GetIdleState\n
2221:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS5          LL_TIM_OC_GetIdleState\n
2222:Inc/stm32f3xx_ll_tim.h ****   *         CR2         OIS6          LL_TIM_OC_GetIdleState
2223:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2224:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2225:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2226:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 52


2227:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2228:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
2229:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2230:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
2231:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2232:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2233:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2234:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2235:Inc/stm32f3xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2236:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
2237:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
2238:Inc/stm32f3xx_ll_tim.h ****   */
2239:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
2240:Inc/stm32f3xx_ll_tim.h **** {
2241:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2242:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChanne
2243:Inc/stm32f3xx_ll_tim.h **** }
2244:Inc/stm32f3xx_ll_tim.h **** 
2245:Inc/stm32f3xx_ll_tim.h **** /**
2246:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable fast mode for the output channel.
2247:Inc/stm32f3xx_ll_tim.h ****   * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
2248:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
2249:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
2250:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
2251:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_EnableFast\n
2252:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2253:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_EnableFast\n
2254:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_EnableFast
2255:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2256:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_EnableFast\n
2257:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_EnableFast
2258:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2259:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_EnableFast\n
2260:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_EnableFast
2261:Inc/stm32f3xx_ll_tim.h ****   * @endif
2262:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2263:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2264:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2265:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2266:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2267:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2268:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2269:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2270:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5FE and OC6FE are not available for all F3 devices
2271:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2272:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2273:Inc/stm32f3xx_ll_tim.h ****   */
2274:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
2275:Inc/stm32f3xx_ll_tim.h **** {
2276:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2277:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2278:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
2279:Inc/stm32f3xx_ll_tim.h **** 
2280:Inc/stm32f3xx_ll_tim.h **** }
2281:Inc/stm32f3xx_ll_tim.h **** 
2282:Inc/stm32f3xx_ll_tim.h **** /**
2283:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable fast mode for the output channel.
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 53


2284:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
2285:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
2286:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
2287:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_DisableFast\n
2288:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2289:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_DisableFast\n
2290:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_DisableFast
2291:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2292:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_DisableFast\n
2293:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_DisableFast
2294:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2295:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_DisableFast\n
2296:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_DisableFast
2297:Inc/stm32f3xx_ll_tim.h ****   * @endif
2298:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2299:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2300:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2301:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2302:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2303:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2304:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2305:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2306:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5FE and OC6FE are not available for all F3 devices
2307:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2308:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2309:Inc/stm32f3xx_ll_tim.h ****   */
2310:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
2311:Inc/stm32f3xx_ll_tim.h **** {
2312:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2313:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2314:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
2315:Inc/stm32f3xx_ll_tim.h **** 
2316:Inc/stm32f3xx_ll_tim.h **** }
2317:Inc/stm32f3xx_ll_tim.h **** 
2318:Inc/stm32f3xx_ll_tim.h **** /**
2319:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicates whether fast mode is enabled for the output channel.
2320:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
2321:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
2322:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
2323:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
2324:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2325:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_IsEnabledFast\n
2326:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_IsEnabledFast
2327:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2328:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_IsEnabledFast\n
2329:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_IsEnabledFast
2330:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2331:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5FE          LL_TIM_OC_DisableFast\n
2332:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6FE          LL_TIM_OC_DisableFast
2333:Inc/stm32f3xx_ll_tim.h ****   * @endif
2334:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2335:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2336:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2337:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2338:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2339:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2340:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 54


2341:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2342:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5FE and OC6FE are not available for all F3 devices
2343:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2344:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2345:Inc/stm32f3xx_ll_tim.h ****   */
2346:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
2347:Inc/stm32f3xx_ll_tim.h **** {
2348:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2349:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2350:Inc/stm32f3xx_ll_tim.h ****   register uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
2351:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(*pReg, bitfield) == bitfield);
2352:Inc/stm32f3xx_ll_tim.h **** }
2353:Inc/stm32f3xx_ll_tim.h **** 
2354:Inc/stm32f3xx_ll_tim.h **** /**
2355:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
2356:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
2357:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
2358:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
2359:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload\n
2360:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2361:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_EnablePreload\n
2362:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_EnablePreload
2363:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2364:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_EnablePreload\n
2365:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_EnablePreload
2366:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2367:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_EnablePreload\n
2368:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_EnablePreload
2369:Inc/stm32f3xx_ll_tim.h ****   * @endif
2370:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2371:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2372:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2373:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2374:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2375:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2376:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2377:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2378:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5PE and OC6PE are not available for all F3 devices
2379:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2380:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2381:Inc/stm32f3xx_ll_tim.h ****   */
2382:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
2383:Inc/stm32f3xx_ll_tim.h **** {
2384:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2385:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2386:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
2387:Inc/stm32f3xx_ll_tim.h **** }
2388:Inc/stm32f3xx_ll_tim.h **** 
2389:Inc/stm32f3xx_ll_tim.h **** /**
2390:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
2391:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
2392:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
2393:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
2394:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload\n
2395:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2396:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_DisablePreload\n
2397:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_DisablePreload
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 55


2398:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2399:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_DisablePreload\n
2400:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_DisablePreload
2401:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2402:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_DisablePreload\n
2403:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_DisablePreload
2404:Inc/stm32f3xx_ll_tim.h ****   * @endif
2405:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2406:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2407:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2408:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2409:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2410:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2411:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2412:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2413:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5PE and OC6PE are not available for all F3 devices
2414:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2415:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2416:Inc/stm32f3xx_ll_tim.h ****   */
2417:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
2418:Inc/stm32f3xx_ll_tim.h **** {
2419:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2420:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2421:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
2422:Inc/stm32f3xx_ll_tim.h **** }
2423:Inc/stm32f3xx_ll_tim.h **** 
2424:Inc/stm32f3xx_ll_tim.h **** /**
2425:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channe
2426:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
2427:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
2428:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
2429:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
2430:Inc/stm32f3xx_ll_tim.h ****   * @if   STM32F334x8
2431:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_IsEnabledPreload\n
2432:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_IsEnabledPreload
2433:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2434:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_IsEnabledPreload\n
2435:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_IsEnabledPreload
2436:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2437:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5PE          LL_TIM_OC_IsEnabledPreload\n
2438:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6PE          LL_TIM_OC_IsEnabledPreload
2439:Inc/stm32f3xx_ll_tim.h ****   * @endif
2440:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2441:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2442:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2443:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2444:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2445:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2446:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2447:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2448:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5PE and OC6PE are not available for all F3 devices
2449:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2450:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2451:Inc/stm32f3xx_ll_tim.h ****   */
2452:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
2453:Inc/stm32f3xx_ll_tim.h **** {
2454:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 56


2455:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2456:Inc/stm32f3xx_ll_tim.h ****   register uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
2457:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(*pReg, bitfield) == bitfield);
2458:Inc/stm32f3xx_ll_tim.h **** }
2459:Inc/stm32f3xx_ll_tim.h **** 
2460:Inc/stm32f3xx_ll_tim.h **** /**
2461:Inc/stm32f3xx_ll_tim.h ****   * @brief  Enable clearing the output channel on an external event.
2462:Inc/stm32f3xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
2463:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2464:Inc/stm32f3xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2465:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
2466:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
2467:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
2468:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_EnableClear\n
2469:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2470:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_EnableClear\n
2471:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_EnableClear
2472:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2473:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_EnableClear\n
2474:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_EnableClear
2475:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2476:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_EnableClear\n
2477:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_EnableClear
2478:Inc/stm32f3xx_ll_tim.h ****   * @endif
2479:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2480:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2481:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2482:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2483:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2484:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2485:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2486:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2487:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5CE and OC6CE are not available for all F3 devices
2488:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2489:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2490:Inc/stm32f3xx_ll_tim.h ****   */
2491:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
2492:Inc/stm32f3xx_ll_tim.h **** {
2493:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2494:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2495:Inc/stm32f3xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
2496:Inc/stm32f3xx_ll_tim.h **** }
2497:Inc/stm32f3xx_ll_tim.h **** 
2498:Inc/stm32f3xx_ll_tim.h **** /**
2499:Inc/stm32f3xx_ll_tim.h ****   * @brief  Disable clearing the output channel on an external event.
2500:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2501:Inc/stm32f3xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2502:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
2503:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
2504:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
2505:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_DisableClear\n
2506:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2507:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_DisableClear\n
2508:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_DisableClear
2509:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2510:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_DisableClear\n
2511:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_DisableClear
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 57


2512:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2513:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_DisableClear\n
2514:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_DisableClear
2515:Inc/stm32f3xx_ll_tim.h ****   * @endif
2516:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2517:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2518:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2519:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2520:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2521:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2522:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2523:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2524:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5CE and OC6CE are not available for all F3 devices
2525:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2526:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2527:Inc/stm32f3xx_ll_tim.h ****   */
2528:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
2529:Inc/stm32f3xx_ll_tim.h **** {
2530:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2531:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2532:Inc/stm32f3xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
2533:Inc/stm32f3xx_ll_tim.h **** }
2534:Inc/stm32f3xx_ll_tim.h **** 
2535:Inc/stm32f3xx_ll_tim.h **** /**
2536:Inc/stm32f3xx_ll_tim.h ****   * @brief  Indicates clearing the output channel on an external event is enabled for the output ch
2537:Inc/stm32f3xx_ll_tim.h ****   * @note This function enables clearing the output channel on an external event.
2538:Inc/stm32f3xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
2539:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
2540:Inc/stm32f3xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
2541:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
2542:Inc/stm32f3xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
2543:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
2544:Inc/stm32f3xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
2545:Inc/stm32f3xx_ll_tim.h ****   * @if STM32F334x8
2546:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_IsEnabledClear\n
2547:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_IsEnabledClear
2548:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F303xC
2549:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_IsEnabledClear\n
2550:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_IsEnabledClear
2551:Inc/stm32f3xx_ll_tim.h ****   * @elseif STM32F302x8
2552:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC5CE          LL_TIM_OC_IsEnabledClear\n
2553:Inc/stm32f3xx_ll_tim.h ****   *         CCMR3        OC6CE          LL_TIM_OC_IsEnabledClear
2554:Inc/stm32f3xx_ll_tim.h ****   * @endif
2555:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2556:Inc/stm32f3xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2557:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2558:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2559:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2560:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2561:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH5
2562:Inc/stm32f3xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH6
2563:Inc/stm32f3xx_ll_tim.h ****   * @note   OC5CE and OC6CE are not available for all F3 devices
2564:Inc/stm32f3xx_ll_tim.h ****   * @note   CH5 and CH6 channels are not available for all F3 devices
2565:Inc/stm32f3xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2566:Inc/stm32f3xx_ll_tim.h ****   */
2567:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
2568:Inc/stm32f3xx_ll_tim.h **** {
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 58


2569:Inc/stm32f3xx_ll_tim.h ****   register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2570:Inc/stm32f3xx_ll_tim.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iCh
2571:Inc/stm32f3xx_ll_tim.h ****   register uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
2572:Inc/stm32f3xx_ll_tim.h ****   return (READ_BIT(*pReg, bitfield) == bitfield);
2573:Inc/stm32f3xx_ll_tim.h **** }
2574:Inc/stm32f3xx_ll_tim.h **** 
2575:Inc/stm32f3xx_ll_tim.h **** /**
2576:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal an
2577:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2578:Inc/stm32f3xx_ll_tim.h ****   *       dead-time insertion feature is supported by a timer instance.
2579:Inc/stm32f3xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
2580:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
2581:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2582:Inc/stm32f3xx_ll_tim.h ****   * @param  DeadTime between Min_Data=0 and Max_Data=255
2583:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2584:Inc/stm32f3xx_ll_tim.h ****   */
2585:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
2586:Inc/stm32f3xx_ll_tim.h **** {
2587:Inc/stm32f3xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
2588:Inc/stm32f3xx_ll_tim.h **** }
2589:Inc/stm32f3xx_ll_tim.h **** 
2590:Inc/stm32f3xx_ll_tim.h **** /**
2591:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set compare value for output channel 1 (TIMx_CCR1).
2592:Inc/stm32f3xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2593:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2594:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2595:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2596:Inc/stm32f3xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2597:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
2598:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2599:Inc/stm32f3xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2600:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2601:Inc/stm32f3xx_ll_tim.h ****   */
2602:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
2603:Inc/stm32f3xx_ll_tim.h **** {
2604:Inc/stm32f3xx_ll_tim.h ****   WRITE_REG(TIMx->CCR1, CompareValue);
2605:Inc/stm32f3xx_ll_tim.h **** }
2606:Inc/stm32f3xx_ll_tim.h **** 
2607:Inc/stm32f3xx_ll_tim.h **** /**
2608:Inc/stm32f3xx_ll_tim.h ****   * @brief  Set compare value for output channel 2 (TIMx_CCR2).
2609:Inc/stm32f3xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2610:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2611:Inc/stm32f3xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2612:Inc/stm32f3xx_ll_tim.h ****   * @note Macro @ref IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2613:Inc/stm32f3xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2614:Inc/stm32f3xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
2615:Inc/stm32f3xx_ll_tim.h ****   * @param  TIMx Timer instance
2616:Inc/stm32f3xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2617:Inc/stm32f3xx_ll_tim.h ****   * @retval None
2618:Inc/stm32f3xx_ll_tim.h ****   */
2619:Inc/stm32f3xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
 440              		.loc 2 2619 22 is_stmt 1 view .LVU122
 441              	.LBB6:
2620:Inc/stm32f3xx_ll_tim.h **** {
2621:Inc/stm32f3xx_ll_tim.h ****   WRITE_REG(TIMx->CCR2, CompareValue);
 442              		.loc 2 2621 3 view .LVU123
 443 0016 9C63     		str	r4, [r3, #56]
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 59


 444              	.LVL19:
 445              		.loc 2 2621 3 is_stmt 0 view .LVU124
 446              	.LBE6:
 447              	.LBE5:
 171:Src/tim.c     ****   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 448              		.loc 1 171 3 is_stmt 1 view .LVU125
 449 0018 0421     		movs	r1, #4
 450 001a 2846     		mov	r0, r5
 451 001c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 452              	.LVL20:
 172:Src/tim.c     ****   //HAL_Delay(10);
 173:Src/tim.c     ****   //HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);       
 174:Src/tim.c     **** }
 453              		.loc 1 174 1 is_stmt 0 view .LVU126
 454 0020 38BD     		pop	{r3, r4, r5, pc}
 455              	.L39:
 456 0022 00BF     		.align	2
 457              	.L38:
 458 0024 00000000 		.word	htim8
 459              		.cfi_endproc
 460              	.LFE326:
 462              		.comm	htim8,64,4
 463              		.section	.rodata.MX_TIM8_Init.str1.4,"aMS",%progbits,1
 464              		.align	2
 465              	.LC0:
 466 0000 5372632F 		.ascii	"Src/tim.c\000"
 466      74696D2E 
 466      6300
 467              		.text
 468              	.Letext0:
 469              		.file 3 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default_type
 470              		.file 4 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 471              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 472              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 473              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 474              		.file 8 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/lib/gcc/arm-none-eabi/8.3.1/include/stddef.
 475              		.file 9 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_types.h"
 476              		.file 10 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/reent.h"
 477              		.file 11 "/usr/local/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/lock.h"
 478              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 479              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 480              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 481              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 482              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 483              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 484              		.file 18 "Inc/tim.h"
ARM GAS  /var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tim.c
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:18     .text.HAL_TIM_PWM_MspInit:0000000000000000 $t
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:26     .text.HAL_TIM_PWM_MspInit:0000000000000000 HAL_TIM_PWM_MspInit
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:72     .text.HAL_TIM_PWM_MspInit:0000000000000028 $d
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:77     .text.HAL_TIM_MspPostInit:0000000000000000 $t
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:84     .text.HAL_TIM_MspPostInit:0000000000000000 HAL_TIM_MspPostInit
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:144    .text.HAL_TIM_MspPostInit:0000000000000034 $d
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:149    .text.MX_TIM8_Init:0000000000000000 $t
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:156    .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:349    .text.MX_TIM8_Init:00000000000000bc $d
                            *COM*:0000000000000040 htim8
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:356    .text.HAL_TIM_PWM_MspDeInit:0000000000000000 $t
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:363    .text.HAL_TIM_PWM_MspDeInit:0000000000000000 HAL_TIM_PWM_MspDeInit
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:392    .text.HAL_TIM_PWM_MspDeInit:0000000000000018 $d
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:398    .text.pulse_tim8_ch2:0000000000000000 $t
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:405    .text.pulse_tim8_ch2:0000000000000000 pulse_tim8_ch2
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:458    .text.pulse_tim8_ch2:0000000000000024 $d
/var/folders/md/lgcc8l7571l9vt9sx0g0zflw0000gn/T//ccGqzUYG.s:464    .rodata.MX_TIM8_Init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
_Error_Handler
HAL_TIM_PWM_Stop
HAL_TIM_PWM_Start
